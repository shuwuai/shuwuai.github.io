<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Git Introduction]]></title>
      <url>/2018/01/18/Git-Introduction/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/gswg-git-solid-choice.png" alt="gswg-git-solid-choice"></p>
<p>git 是用于 Linux 内核开发的版本控制工具。与 CVS、Subversion 一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git 的速度很快，这对于诸如 Linux 内核这样的大项目来说自然很重要。git 最为出色的是它的合并追踪（merge tracing）能力。</p>
<a id="more"></a>
<h3 id="Rpository"><a href="#Rpository" class="headerlink" title="Rpository"></a>Rpository</h3><p>Repository 是记录档案或目录状态的地方，储存内容的修改历史记录。在 Repository 的管理下除了储存修改历史记录之外，还可以追踪内容的状态和版本。</p>
<p>首先，Git 的数据库分为远端数据库和本地端数据库。</p>
<ul>
<li>远端数据库：配有专用的伺服器，为了让多人共享而建立的数据库。</li>
<li>本地端数据库：为了方便用户个人使用，在自己的机器上配置的数据库。</li>
</ul>
<p>可以在本地端数据库上使用像是还原更改、跟踪更改等所有 Git 版本控制功能。不过，如果想要公开在本地端数据库的修改内容，就需要将内容上传到远端数据库了。另外，透过远端数据库还可以取得其他人修改的内容。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_1.png" alt="Snip20180118_1"></p>
<h3 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h3><p>建立本地数据库的方法有两种：一种是重建新数据库，另一种是复制远端数据库。</p>
<h3 id="记录修改的提交"><a href="#记录修改的提交" class="headerlink" title="记录修改的提交"></a>记录修改的提交</h3><p>把变更与新增的档案/目录储存到数据库中，需要执行 Commit，执行提交后，数据库会产生上次提交的状态与现在状态的差异记录，也被称为 Revision</p>
<p>工作目录（ Working Tree）是保存您目前正在处理档桉的目录，Git 相关的操作都会在这个目录下完成。</p>
<p>索引 ( Index )位于工作目录和数据库之间，是为了向数据库提交作准备的暂存区域。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_2.png" alt="Snip20180118_2"></p>
<h3 id="工作目录与索引"><a href="#工作目录与索引" class="headerlink" title="工作目录与索引"></a>工作目录与索引</h3><p>所以在工作目录上做的任何变更并不会直接提交到数据库的。Git 在执行提交的时候，不是直接将工作目录的状态储存到数据库，而是将索引的状态储存到数据库。因此，要提交变更，首先必需要把变更内容加入到索引中。</p>
<p>索引的存在可以排除工作目录里不必要的档案提交，还可以只将档案变更内容的一部分加入索引并提交。</p>
<h4 id="Push-推送"><a href="#Push-推送" class="headerlink" title="Push (推送)"></a>Push (推送)</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/pull push.png" alt="pull push"></p>
<p>为了将本地端数据库的修改历史共享到远程数据库，必须上​​传本地端数据库中储存的修改历史。</p>
<p>为此，需要在 Git 执行 Push (推送) 操作。执行 Push 之后，本地端的修改历史会被上传到远端数据库。远端数据库的修改历史就会和本地端数据库的修改历史保持同步。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_3.png" alt="Snip20180118_3"></p>
<p>若是共享的远端数据库由多人同时作业，那么作业完毕后所有人都会把修改历史 push 到远端数据库。所以需要同步其他人 push 的修改内容到自己的本地端数据库。</p>
<h4 id="Pull-拉取"><a href="#Pull-拉取" class="headerlink" title="Pull (拉取)"></a>Pull (拉取)</h4><p>欲同步远端数据库以更新本地端数据库，请使用 Pull(拉取)。</p>
<p>执行 pull 之后，会从远端数据库下载最新的修改历史，将其同步到自己的本地端数据库。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_4.png" alt="Snip20180118_4"></p>
<ul>
<li>origin/master：代表远端数据库「origin」的「master」分支位置。</li>
<li>origin/HEAD：代表远端数据库「origin」当前提交的位置。通常和「origin/master」的位置相同。</li>
<li>master：代表本地端数据库的「master」分支位置。</li>
</ul>
<p>上次的 push 到执行下一次的 push 的期间，如果有其他人 push 更新了远端数据库，而你没有更新本地端数据库，那么你的 push 会被拒绝。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_5.png" alt="Snip20180118_5"></p>
<p>为了能支援同时进行数个功能的增加或版本控制，Git 具备了分支的功能。分支是为了将修改记录的整体流程分开储存，让分开的分支不受其他分支的影响，所以在同一个数据库裡可以同时进行多个不同的修改。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_7.png" alt="Snip20180118_7"></p>
<p>为了让群组的成员不受其他成员的影响，可以在主要分支建立自己专用的分支。完成作业的成员们，将自己分支的修改导入到主要分支，这样大家都可以不受其他成员的影响，导入自己的修改内容。而且每个提交的历史记录都会被储存，当发生问题时，可以更容易找到发生问题的地方。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20180118_8.png" alt="Snip20180118_8"></p>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Simple Shopping Cart using Sessions]]></title>
      <url>/2018/01/05/Simple-Shopping-Cart-using-Sessions/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/shutterstock_143808508.jpg" alt="shutterstock_143808508"></p>
<p>会话用于维持请求和请求之间的状态。<br>HTTP 请求自身是完全无状态的。从服务器的角度来说，当月户的 Web 浏览器打开第一个连接到服务器的套接字时请求就开始了，直到服务器返回最后一个数据包并关闭连接时，该请求将结束。此时，在用户的浏览器和服务器之间不再有任何联系，当下个连接开始时，无法将新的请求与之前的请求关联起来。</p>
<a id="more"></a>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Shopping-Cart.jpg" alt="Shopping-Cart"></p>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP の教科書 Part I]]></title>
      <url>/2017/12/17/HTTP-Textbook-Part1/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20171217_3.png" alt="Snip20171217_3"></p>
<h2 id="1-Web-及网络基础"><a href="#1-Web-及网络基础" class="headerlink" title="1. Web 及网络基础"></a>1. Web 及网络基础</h2><h3 id="1-1-网络基础-TCP-IP"><a href="#1-1-网络基础-TCP-IP" class="headerlink" title="1.1 网络基础 TCP/IP"></a>1.1 网络基础 TCP/IP</h3><p>通常使用的网络是在 TCP/IP 协议族（IEEE802, FDDI, TCP, FTP, PPPoE, UDP..）的基础上运作的，而 HTTP 属于它内部的一个子集。</p>
<p>TCP/IP 协议族按层次分别分为：应用层，传输层，网络层和数据链路层。</p>
<a id="more"></a>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/tpc-ip-and-osi-model-cellbiol.com_.png" alt="tpc-ip-and-osi-model-cellbiol.com_"></p>
<h3 id="1-2-TCP-IP-通信传输流"><a href="#1-2-TCP-IP-通信传输流" class="headerlink" title="1.2 TCP/IP 通信传输流"></a>1.2 TCP/IP 通信传输流</h3><h4 id="客户端请求："><a href="#客户端请求：" class="headerlink" title="客户端请求："></a>客户端请求：</h4><p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的 Header 信息。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/data-flow-tx.png" alt="data-flow-tx"></p>
<h4 id="服务器端响应："><a href="#服务器端响应：" class="headerlink" title="服务器端响应："></a>服务器端响应：</h4><p>接收端在层层传输数据时，每经过一层都会把对应的 Header 信息消去。这种把数据信息包装起来的做法成为封装。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/data-flow-rx.png" alt="data-flow-rx"></p>
<h3 id="1-3-与-HTTP-关系密切的协议：IP、TCP-和-DNS"><a href="#1-3-与-HTTP-关系密切的协议：IP、TCP-和-DNS" class="headerlink" title="1.3 与 HTTP 关系密切的协议：IP、TCP 和 DNS"></a>1.3 与 HTTP 关系密切的协议：IP、TCP 和 DNS</h3><h4 id="IP-协议："><a href="#IP-协议：" class="headerlink" title="IP 协议："></a>IP 协议：</h4><p>作用是把各种数据包传送给对方，要保证确实传送到对方那里，两个重要的条件是 IP 地址和 MAC 地址。</p>
<blockquote>
<p>IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址和 MAC 地址进行配对，前者可变换，后者基本上不会更改</p>
</blockquote>
<h4 id="TCP-协议："><a href="#TCP-协议：" class="headerlink" title="TCP 协议："></a>TCP 协议：</h4><p>TCP 协议位于传输层，提供可靠的字节流服务。</p>
<blockquote>
<p>字节流服务是指为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。</p>
</blockquote>
<h4 id="三次握手协议："><a href="#三次握手协议：" class="headerlink" title="三次握手协议："></a>三次握手协议：</h4><p>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</p>
<p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。<br><img src="http://oxgw3nd2b.bkt.clouddn.com/TCP_Handshake-1465428815293.png" alt="TCP_Handshake-1465428815293"></p>
<h4 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS 域名解析"></a>DNS 域名解析</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/safeum_messenger_switcher_hacks_wifi_routers2.png" alt="safeum_messenger_switcher_hacks_wifi_routers2"></p>
<h3 id="1-4-URI-amp-URL"><a href="#1-4-URI-amp-URL" class="headerlink" title="1.4 URI &amp; URL"></a>1.4 URI &amp; URL</h3><p><code>统一资源标识符</code> 与 <code>统一资源定位符</code></p>
<p>URI：采用 HTTP 协议时，协议方案就是 http，除此之外，还有 ftp、mailto、telnet、file等。URL 是 URI 的子集。<br><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20171217_5.png" alt="Snip20171217_5"></p>
<h4 id="绝对-URI-格式："><a href="#绝对-URI-格式：" class="headerlink" title="绝对 URI 格式："></a>绝对 URI 格式：</h4><p>协议方案名、登录信息、服务器地址、服务器端口号、带层次的文件路径、查询字符串、片段标识符</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/img-20160520-01.jpg" alt="img-20160520-01"></p>
<h2 id="2-简单的-HTTP-协议"><a href="#2-简单的-HTTP-协议" class="headerlink" title="2. 简单的 HTTP 协议"></a>2. 简单的 HTTP 协议</h2><p><img src="http://oxgw3nd2b.bkt.clouddn.com/20150526203118457.png" alt="20150526203118457"></p>
<h3 id="2-1-告知服务器意图的-HTTP-方法"><a href="#2-1-告知服务器意图的-HTTP-方法" class="headerlink" title="2.1 告知服务器意图的 HTTP 方法"></a>2.1 告知服务器意图的 HTTP 方法</h3><p><img src="http://oxgw3nd2b.bkt.clouddn.com/3.png" alt="3"></p>
<p>GET：获取资源<br>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经过服务器端解析后返回相应内容。也就是说，如果请求的资源师文本，那就保持原样返回；如果像是 CGI 那样的程序，则返回经过执行后的输出结果。</p>
<p>POST：传输实体主体<br>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取相应的主题内容。</p>
<p>PUT：传输文件<br>PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p>
<blockquote>
<p>HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的 Web 网站不使用该方法。</p>
</blockquote>
<p>HEAD：获得报文 Header<br>和 GET 方法一样，只是不返回报文主体部分，用于确认 URI 的有效性及资源更新的日期时间等。</p>
<p>DELETE：<br>用来删除文件，与 PUT 相反。</p>
<p>OPTIONS：询问支持的方法<br>用来查询针对请求 URI 指定的资源支持的方法。</p>
<p>TRACE：追踪路径<br>让 Web 服务器端将之前的请求通信环回给客户端的方法。</p>
<p>CONNECT：要求用隧道协议连接代理<br>要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL 和 TLS 协议把通信的内容加密后经网络隧道传输。</p>
<h3 id="2-2-使用-Cookie-的状态管理"><a href="#2-2-使用-Cookie-的状态管理" class="headerlink" title="2.2 使用 Cookie 的状态管理"></a>2.2 使用 Cookie 的状态管理</h3><p>HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。</p>
<p>假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/cookie.png" alt="cookie"></p>
<p>保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写人 Cookie 信息来控制客户端的状态。</p>
<p>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
<h2 id="3-HTTP-报文内的-HTTP-信息"><a href="#3-HTTP-报文内的-HTTP-信息" class="headerlink" title="3. HTTP 报文内的 HTTP 信息"></a>3. HTTP 报文内的 HTTP 信息</h2><p>HTTP 报文大致可以分为报文首部和报文主体。通常，并不一定要有报文主体。</p>
<p>报文首部：请求行、状态行、首部字段</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2.png" alt="2"></p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/33.jpg" alt="33"></p>
<h2 id="4-返回结果的-HTTP-状态码"><a href="#4-返回结果的-HTTP-状态码" class="headerlink" title="4. 返回结果的 HTTP 状态码"></a>4. 返回结果的 HTTP 状态码</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/6.png" alt="6"></p>
<p><code>204</code><br>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。比如，当从浏览器发出请求处理后，返回 204 响应，那么浏览器显示的页面不发生更新。</p>
<p>一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p>
<p><code>301</code><br>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p>
<p>像下方给出的请求 URI，当指定资源路径的最后忘记添加斜杠“/”，就会产生 301 状态码。</p>
<p><code>302</code><br>和 301 Moved Permanently 状态码相似，但 302 状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。</p>
<p><code>304</code><br>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p>
<p><code>401</code><br>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示用户认证失败。</p>
<p>返回含有 401 的响应必须包含一个适用于被请求资源的 WWW- Authenticate 首部用以质询（challenge）用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</p>
<p><code>403</code><br>该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。</p>
<p>未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能是发生 403 的原因。</p>
<p><code>500</code><br>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>
<p><code>503</code><br>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写人 Retry - After 首部字段再返回给客户端。</p>
<h2 id="5-与-HTTP-协作的-Web-服务器"><a href="#5-与-HTTP-协作的-Web-服务器" class="headerlink" title="5. 与 HTTP 协作的 Web 服务器"></a>5. 与 HTTP 协作的 Web 服务器</h2><p><strong>缓存代理</strong><br>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。</p>
<p>当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</p>
<p><strong>透明代理</strong><br>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</p>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 函数 DOM BOM]]></title>
      <url>/2017/12/14/JavaScript-Function-DOM-BOM/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/bom.jpg" alt="bo"></p>
<h3 id="1-JavaScript-函数"><a href="#1-JavaScript-函数" class="headerlink" title="1. JavaScript 函数"></a>1. JavaScript 函数</h3><p>JavaScript 使用关键字 function 定义函数。函数可以通过声明定义，也可以是一个表达式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">functionName(parameter1, parameter2, parameter3) &#123;</div><div class="line">    <span class="comment">// 要执行的代码……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="函数的定义与实用："><a href="#函数的定义与实用：" class="headerlink" title="函数的定义与实用："></a>函数的定义与实用：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过表达式定义并使用</span></div><div class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;</div><div class="line"><span class="keyword">var</span> z = x(<span class="number">4</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过函数构造器定义</span></div><div class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;</div><div class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a * b;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 作为一个值使用</span></div><div class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</div><div class="line"><span class="comment">// 作为表达式使用</span></div><div class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">2</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>JavaScript 函数有个内置的对象 arguments 对象。argument 对象包含了函数调用的参数数组。</p>
</blockquote>
<h4 id="JavaScript-函数调用的四种方式："><a href="#JavaScript-函数调用的四种方式：" class="headerlink" title="JavaScript 函数调用的四种方式："></a>JavaScript 函数调用的四种方式：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 作为一个函数调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a * b;</div><div class="line">&#125;</div><div class="line">myFunction(<span class="number">10</span>, <span class="number">2</span>); </div><div class="line"></div><div class="line"><span class="comment">// 作为对象的方法调用</span></div><div class="line"><span class="keyword">var</span> myObject = &#123; <span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span>, <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">myObject.fullName(); </div><div class="line"></div><div class="line"><span class="comment">// 使用构造函数调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = arg1;</div><div class="line">    <span class="keyword">this</span>.lastName  = arg2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> myFunction(<span class="string">"John"</span>,<span class="string">"Doe"</span>);</div><div class="line">x.firstName;     </div><div class="line"></div><div class="line"><span class="comment">// 作为函数的方法调用函数，call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a * b;</div><div class="line">&#125;</div><div class="line">myObject = myFunction.call(myObject, <span class="number">10</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<h3 id="2-JavaScript-HTML-DOM"><a href="#2-JavaScript-HTML-DOM" class="headerlink" title="2. JavaScript HTML DOM"></a>2. JavaScript HTML DOM</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20171214_1.png" alt="Snip20171214_1"><br>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p>
<ul>
<li>JavaScript 能够改变页面中的所有 HTML 元素</li>
<li>JavaScript 能够改变页面中的所有 HTML 属性</li>
<li>JavaScript 能够改变页面中的所有 CSS 样式</li>
<li>JavaScript 能够对页面中的所有事件做出反应</li>
</ul>
<h4 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过 id 查找 HTML 元素</span></div><div class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"intro"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过标签名查找 HTML 元素</span></div><div class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</div><div class="line"><span class="keyword">var</span> y=x.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过类名查找 HTML 元素</span></div><div class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"intro"</span>);</div></pre></td></tr></table></figure>
<h4 id="DOM-改变-HTML"><a href="#DOM-改变-HTML" class="headerlink" title="DOM - 改变 HTML"></a>DOM - 改变 HTML</h4><p><strong>改变 HTML 输出流：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 HTML DOM 获得 id = "header" 的元素</span></div><div class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"header"</span>);</div><div class="line"><span class="comment">// 更改此元素的内容 (innerHTML)</span></div><div class="line">element.innerHTML=<span class="string">"新标题"</span>;</div></pre></td></tr></table></figure>
<p><strong>改变 HTML 属性：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 HTML DOM 来获得 id="image" 的元素</span></div><div class="line"><span class="comment">// 更改此元素的属性（把 "smiley.gif" 改为 "landscape.jpg"）</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).src=<span class="string">"landscape.jpg"</span>;</div></pre></td></tr></table></figure>
<p><strong>改变 HTML 样式：</strong></p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20171214_3.png" alt="Snip20171214_3"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>).style.color=<span class="string">"blue"</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>).style.fontFamily=<span class="string">"Arial"</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>).style.fontSize=<span class="string">"larger"</span>;</div></pre></td></tr></table></figure>
<h4 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h4><p>我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。</p>
<p>如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：</p>
<ul>
<li>当用户点击鼠标时</li>
<li>当网页已加载时</li>
<li>当图像已加载时</li>
<li>当鼠标移动到元素上时</li>
<li>当输入字段被改变时</li>
<li>当提交 HTML 表单时</li>
<li>当用户触发按键时</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changetext</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">	id.innerHTML=<span class="string">"Ooops!"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用 DOM 分配事件</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;displayDate()&#125;;</div><div class="line"></div><div class="line"><span class="comment">// onload 和 onunload 事件会在用户进入或离开页面时被触发。</span></div><div class="line"><span class="comment">// onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</span></div><div class="line"><span class="comment">// onload 和 onunload 事件可用于处理 cookie。</span></div><div class="line">&lt;body onload=<span class="string">"checkCookies()"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// onchange 事件常结合对输入字段的验证来使用。</span></div><div class="line"><span class="comment">// 下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</span></div><div class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"fname"</span> onchange=<span class="string">"upperCase()"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</span></div><div class="line">onmouseover=<span class="string">"mOver(this)"</span> onmouseout=<span class="string">"mOut(this)"</span> style=<span class="string">"background-color:#D94A38;width:120px;height:20px;padding:40px;"</span>&gt;Mouse Over Me</div></pre></td></tr></table></figure>
<h4 id="DOM-EventListener"><a href="#DOM-EventListener" class="headerlink" title="DOM EventListener"></a>DOM EventListener</h4><p>addEventListener( ) 方法用于向指定元素添加事件句柄。addEventListener( ) 方法添加的事件句柄不会覆盖已存在的事件句柄。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>).addEventListener(<span class="string">"click"</span>, myFunction);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert (<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以向一个元素添加多个事件句柄。你可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 同个元素多个同类型事件</span></div><div class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</div><div class="line">x.addEventListener(<span class="string">"click"</span>, myFunction);</div><div class="line">x.addEventListener(<span class="string">"click"</span>, someOtherFunction);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert (<span class="string">"Hello World!"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someOtherFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert (<span class="string">"函数已执行!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 同个元素多个不同类型事件</span></div><div class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</div><div class="line">x.addEventListener(<span class="string">"mouseover"</span>, myFunction);</div><div class="line">x.addEventListener(<span class="string">"click"</span>, mySecondFunction);</div><div class="line">x.addEventListener(<span class="string">"mouseout"</span>, myThirdFunction);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML += <span class="string">"Moused over!&lt;br&gt;"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySecondFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML += <span class="string">"Clicked!&lt;br&gt;"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myThirdFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML += <span class="string">"Moused out!&lt;br&gt;"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当你使用 addEventListener( ) 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。</p>
<p>你可以使用 removeEventListener( ) 方法来移除事件的监听。</p>
<h3 id="3-Java-浏览器-BOM"><a href="#3-Java-浏览器-BOM" class="headerlink" title="3. Java 浏览器 BOM"></a>3. Java 浏览器 BOM</h3><p>浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器”对话”。</p>
<h4 id="Window-尺寸"><a href="#Window-尺寸" class="headerlink" title="Window 尺寸"></a>Window 尺寸</h4><p>有三种方法能够确定浏览器窗口的尺寸。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</span></div><div class="line"><span class="built_in">window</span>.innerHeight;</div><div class="line"><span class="built_in">window</span>.innerWidth;</div><div class="line"></div><div class="line"><span class="comment">// 对于 Internet Explorer 8、7、6、5：</span></div><div class="line"><span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line"><span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line"></div><div class="line"><span class="comment">// 其他</span></div><div class="line"><span class="built_in">document</span>.body.clientHeight;</div><div class="line"><span class="built_in">document</span>.body.clientWidth;</div><div class="line"></div><div class="line"><span class="comment">// 实例</span></div><div class="line"><span class="keyword">var</span> w=<span class="built_in">window</span>.innerWidth</div><div class="line">|| <span class="built_in">document</span>.documentElement.clientWidth</div><div class="line">|| <span class="built_in">document</span>.body.clientWidth;</div><div class="line"><span class="keyword">var</span> h=<span class="built_in">window</span>.innerHeight</div><div class="line">|| <span class="built_in">document</span>.documentElement.clientHeight</div><div class="line">|| <span class="built_in">document</span>.body.clientHeight;</div><div class="line">x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</div><div class="line">x.innerHTML=<span class="string">"浏览器window宽度: "</span> + w + <span class="string">", 高度: "</span> + h + <span class="string">"。"</span></div></pre></td></tr></table></figure>
<h4 id="Window-Screen"><a href="#Window-Screen" class="headerlink" title="Window Screen"></a>Window Screen</h4><p>window.screen 对象包含有关用户屏幕的信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(screen.width + <span class="string">"*"</span> + screen.height);</div><div class="line"><span class="built_in">document</span>.write(screen.availWidth + <span class="string">"*"</span> + screen.availHeight);</div><div class="line"><span class="built_in">document</span>.write(screen.colorDepth);</div><div class="line"><span class="built_in">document</span>.write(screen.pixelDepth);</div></pre></td></tr></table></figure>
<h4 id="Window-Location"><a href="#Window-Location" class="headerlink" title="Window Location"></a>Window Location</h4><p>window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</p>
<ul>
<li>location.hostname 返回 web 主机的域名</li>
<li>location.pathname 返回当前页面的路径和文件名</li>
<li>location.port 返回 web 主机的端口 （80 或 443）</li>
<li>location.protocol 返回所使用的 web 协议（http:// 或 https://）</li>
<li>location.href 属性返回当前页面的 URL。</li>
</ul>
<h4 id="Window-History"><a href="#Window-History" class="headerlink" title="Window History"></a>Window History</h4><p>window.history 对象包含浏览器的历史。window.history对象在编写时可不使用 window 这个前缀。</p>
<p>为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。</p>
<p>history.back( ) - 与在浏览器点击后退按钮相同<br>history.forward( ) - 与在浏览器中点击向前按钮相同</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">goBack</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.history.back() &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Back"</span> <span class="attr">onclick</span>=<span class="string">"goBack()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Window-Navigator"><a href="#Window-Navigator" class="headerlink" title="Window Navigator"></a>Window Navigator</h4><p>window.navigator 对象包含有关访问者浏览器的信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"example"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">txt = <span class="string">"&lt;p&gt;浏览器代号: "</span> + navigator.appCodeName + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;浏览器名称: "</span> + navigator.appName + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;浏览器版本: "</span> + navigator.appVersion + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;启用Cookies: "</span> + navigator.cookieEnabled + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;硬件平台: "</span> + navigator.platform + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;用户代理: "</span> + navigator.userAgent + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">txt+= <span class="string">"&lt;p&gt;用户代理语言: "</span> + navigator.systemLanguage + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"example"</span>).innerHTML=txt;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="JavaScript-弹窗"><a href="#JavaScript-弹窗" class="headerlink" title="JavaScript 弹窗"></a>JavaScript 弹窗</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确认框 confirm()</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> x;</div><div class="line">	<span class="keyword">var</span> r=confirm(<span class="string">"按下按钮!"</span>);</div><div class="line">	<span class="keyword">if</span> (r==<span class="literal">true</span>)&#123; x=<span class="string">"你按下了\"确定\"按钮!"</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; x=<span class="string">"你按下了\"取消\"按钮!"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提示输入框 prompt()</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> x;</div><div class="line">	<span class="keyword">var</span> person=prompt(<span class="string">"请输入你的名字"</span>,<span class="string">"Harry Potter"</span>);</div><div class="line">	<span class="keyword">if</span> (person!=<span class="literal">null</span> &amp;&amp; person!=<span class="string">""</span>)&#123;</div><div class="line">	    x=<span class="string">"你好 "</span> + person + <span class="string">"! 今天感觉如何?"</span>;</div><div class="line">	    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=x;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JavaScript-Cookie"><a href="#JavaScript-Cookie" class="headerlink" title="JavaScript Cookie"></a>JavaScript Cookie</h4><p>Cookie 用于存储 web 页面的用户信息。Cookie 是一些数据, 存储于你电脑上的文本文件中。</p>
<p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。</p>
<p>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</p>
<p>当用户访问 web 页面时，他的名字可以记录在 cookie 中。<br>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cname,cvalue,exdays</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    d.setTime(d.getTime()+(exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</div><div class="line">    <span class="keyword">var</span> expires = <span class="string">"expires="</span>+d.toGMTString();</div><div class="line">    <span class="built_in">document</span>.cookie = cname+<span class="string">"="</span>+cvalue+<span class="string">"; "</span>+expires;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cname</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name = cname + <span class="string">"="</span>;</div><div class="line">    <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ca.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> c = ca[i].trim();</div><div class="line">        <span class="keyword">if</span> (c.indexOf(name)==<span class="number">0</span>) <span class="keyword">return</span> c.substring(name.length,c.length);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> user=getCookie(<span class="string">"username"</span>);</div><div class="line">    <span class="keyword">if</span> (user!=<span class="string">""</span>)&#123;</div><div class="line">        alert(<span class="string">"Welcome again "</span> + user);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        user = prompt(<span class="string">"Please enter your name:"</span>,<span class="string">""</span>);</div><div class="line">        <span class="keyword">if</span> (user!=<span class="string">""</span> &amp;&amp; user!=<span class="literal">null</span>)&#123;</div><div class="line">            setCookie(<span class="string">"username"</span>,user,<span class="number">30</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 基础]]></title>
      <url>/2017/12/13/JavaScript-Tutorial/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/facebook.png" alt="face"></p>
<p>HTML 中的脚本必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。脚本可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中，运行效果完全一致。</p>
<p>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p>
<p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。如需使用外部文件，请在 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性中设置该 .js 文件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayDate</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=<span class="built_in">Date</span>();</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>HTML 定义了网页的内容，CSS 描述了网页的布局，JavaScript 网页的行为</li>
<li>JavaScript 是可插入 HTML 页面的编程代码</li>
<li>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行</li>
</ul>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/c.png" alt=""></p>
<h3 id="1-JavaScript-输出"><a href="#1-JavaScript-输出" class="headerlink" title="1. JavaScript 输出"></a>1. JavaScript 输出</h3><ul>
<li>使用 window.alert( ) 弹出警告框</li>
<li>使用 document.write( ) 方法将内容写到 HTML 文档中</li>
<li>使用 innerHTML 写入到 HTML 元素 ( 如需从 JavaScript 访问某个 HTML 元素，您可以使用 <code>document.getElementById(id)</code> 方法。使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素 )</li>
<li>使用 console.log( ) 写入到浏览器的控制台</li>
</ul>
<p><strong>仅向 HTML 文档输出写内容：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Date</span>());</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><strong>整个 HTML 文档==将被覆盖==：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   	<span class="built_in">document</span>.write(<span class="built_in">Date</span>());</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-JavaScript-变量、数据类型、对象"><a href="#2-JavaScript-变量、数据类型、对象" class="headerlink" title="2. JavaScript 变量、数据类型、对象"></a>2. JavaScript 变量、数据类型、对象</h3><h4 id="JavaScript-数据类型："><a href="#JavaScript-数据类型：" class="headerlink" title="JavaScript 数据类型："></a>JavaScript 数据类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">16</span>;  <span class="comment">// Number 通过数字字面量赋值 </span></div><div class="line"><span class="keyword">var</span> points = x * <span class="number">10</span>;  <span class="comment">// Number 通过表达式字面量赋值</span></div><div class="line"><span class="keyword">var</span> lastName = <span class="string">"Johnson"</span>;  <span class="comment">// String 通过字符串字面量赋值</span></div><div class="line"><span class="keyword">var</span> cars = [<span class="string">"Saab"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];  <span class="comment">// Array  通过数组字面量赋值</span></div><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>&#125;;  <span class="comment">// Object 通过对象字面量赋值</span></div></pre></td></tr></table></figure>
<p><strong>类型转换：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>(x)         <span class="comment">// 将变量 x 转换为字符串并返回</span></div><div class="line"><span class="built_in">String</span>(<span class="number">123</span>)       <span class="comment">// 将数字 123 转换为字符串并返回</span></div><div class="line"><span class="built_in">String</span>(<span class="number">100</span> + <span class="number">23</span>)  <span class="comment">// 将数字表达式转换为字符串并返回</span></div><div class="line"></div><div class="line">obj = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">obj.toString()   <span class="comment">// 返回Wed Dec 13 2017 20:29:09 GMT+0800 (CST)</span></div><div class="line"></div><div class="line"><span class="built_in">parseFloat</span>()	<span class="comment">// 解析一个字符串，并返回一个浮点数</span></div><div class="line"><span class="built_in">parseInt</span>()  <span class="comment">//  解析一个字符串，并返回一个整数</span></div><div class="line"></div><div class="line">自动转换为字符串</div><div class="line">当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = myVar;</div><div class="line"><span class="comment">// if myVar = &#123;name:"Fjohn"&#125;  // toString 转换为 "[object Object]"</span></div><div class="line"><span class="comment">// if myVar = [1,2,3,4]       // toString 转换为 "1,2,3,4"</span></div><div class="line"><span class="comment">// if myVar = new Date()      // toString 转换为 "Fri Jul 18 2014 09:08:55 GMT+0200"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Number 方法 toString( ) 也是有同样的效果。</p>
</blockquote>
<p><strong>返回构造函数：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"John"</span>.constructor                 <span class="comment">// 返回函数 String()  &#123; [native code] &#125;</span></div><div class="line">(<span class="number">3.14</span>).constructor                 <span class="comment">// 返回函数 Number()  &#123; [native code] &#125;</span></div><div class="line"><span class="literal">false</span>.constructor                  <span class="comment">// 返回函数 Boolean() &#123; [native code] &#125;</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].constructor              <span class="comment">// 返回函数 Array()   &#123; [native code] &#125;</span></div><div class="line">&#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">34</span>&#125;.constructor  <span class="comment">// 返回函数 Object()  &#123; [native code] &#125;</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().constructor             <span class="comment">// 返回函数 Date()    &#123; [native code] &#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;.constructor         <span class="comment">// 返回函数 Function()&#123; [native code] &#125;</span></div></pre></td></tr></table></figure>
<h4 id="Javascript-对象"><a href="#Javascript-对象" class="headerlink" title="Javascript 对象"></a>Javascript 对象</h4><p>对象也是一个变量，但对象可以包含多个值（多个变量）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> car = &#123;<span class="attr">type</span>:<span class="string">"Fiat"</span>, <span class="attr">model</span>:<span class="number">500</span>, <span class="attr">color</span>:<span class="string">"white"</span>&#125;;</div><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">"blue"</span>&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>JavaScript 对象是键值对的容器。键值对通常写法为 name : value (键与值以冒号分割)。键值对在 JavaScript 对象通常称为 <em>对象属性</em>。</p>
</blockquote>
<p><strong>访问对象属性的两种方式：</strong><br><code>person.lastname;</code>   <code>person[&quot;lastName&quot;];</code></p>
<h4 id="Javascript-函数"><a href="#Javascript-函数" class="headerlink" title="Javascript 函数"></a>Javascript 函数</h4><p>可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>) </span>&#123; 执行代码 &#125;</div><div class="line"></div><div class="line"><span class="comment">//  example</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a,b</span>) </span>&#123; <span class="keyword">return</span> a*b; &#125;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=myFunction(<span class="number">4</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p><strong>JavaScript 变量作用域：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">函数内局部变量：</div><div class="line"><span class="comment">// 此处不能调用 carName 变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123; <span class="keyword">var</span> carName = <span class="string">"Volvo"</span>;</div><div class="line">    <span class="comment">// 函数内可调用 carName 变量</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">全局变量：</div><div class="line"><span class="keyword">var</span> carName = <span class="string">" Volvo"</span>;</div><div class="line"><span class="comment">// 此处可调用 carName 变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 函数内可调用 carName 变量</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">如果变量在函数内没有声明（没有使用 <span class="keyword">var</span> 关键字），该变量为全局变量。以下实例中 carName 在函数内，但是为全局变量。</div><div class="line"><span class="comment">// 此处可调用 carName 变量</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123; carName = <span class="string">"Volvo"</span>;</div><div class="line">    <span class="comment">// 此处可调用 carName 变量</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>JavaScript 变量提升</strong></p>
<p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部，因此，变量可以在使用后声明，也就是变量可以先使用再声明。==JavaScript 只有声明的变量会提升，初始化的不会==</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></div><div class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// 查找元素 </span></div><div class="line">elem.innerHTML = x + <span class="string">" "</span> + y;           <span class="comment">// 显示 x 和 y</span></div><div class="line"><span class="keyword">var</span> y = <span class="number">7</span>; <span class="comment">// 初始化 y，实例 2 的 y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y = 7) 并不会提升，所以 y 变量是一个未定义的变量。</span></div><div class="line"></div><div class="line"><span class="comment">// 类似于以下代码：</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">5</span>; <span class="comment">// 初始化 x</span></div><div class="line"><span class="keyword">var</span> y;     <span class="comment">// 声明 y</span></div><div class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// 查找元素</span></div><div class="line">elem.innerHTML = x + <span class="string">" "</span> + y;           <span class="comment">// 显示 x 和 y</span></div><div class="line">y = <span class="number">7</span>;    <span class="comment">// 设置 y 为 7</span></div></pre></td></tr></table></figure>
<blockquote>
<p>局部变量在函数执行完毕后销毁。全局变量在页面关闭后销毁。</p>
</blockquote>
<h4 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h4><p>当在 HTML 页面中使用 JavaScript 时，JavaScript 可以触发这些事件。HTML 事件可以是浏览器行为，也可以是用户行为，如：HTML 页面完成加载、HTML input 字段改变时、HTML 按钮被点击。<br><img src="http://oxgw3nd2b.bkt.clouddn.com/og.jpg" alt="og-w932"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;button onclick=<span class="string">"getElementById('demo').innerHTML=Date()"</span>&gt;现在的时间是?<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">&lt;button onclick=<span class="string">"this.innerHTML=Date()"</span>&gt;现在的时间是?<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">&lt;button onclick=<span class="string">"displayDate()"</span>&gt;现在的时间是?<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="3-JavaScript-流程控制"><a href="#3-JavaScript-流程控制" class="headerlink" title="3. JavaScript 流程控制"></a>3. JavaScript 流程控制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  if-else 语句</span></div><div class="line"><span class="keyword">if</span> (condition1) &#123; </div><div class="line">    当条件 <span class="number">1</span> 为 <span class="literal">true</span> 时执行的代码</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</div><div class="line">    当条件 <span class="number">2</span> 为 <span class="literal">true</span> 时执行的代码</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  当条件 <span class="number">1</span> 和 条件 <span class="number">2</span> 都不为 <span class="literal">true</span> 时执行的代码</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  switch 语句</span></div><div class="line"><span class="keyword">switch</span>(n) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: 执行代码块 <span class="number">1</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>: 执行代码块 <span class="number">2</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>: 与 <span class="keyword">case</span> <span class="number">1</span> 和 <span class="keyword">case</span> <span class="number">2</span> 不同时执行的代码</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  for 循环</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cars.length;i++） &#123; </div><div class="line">    <span class="built_in">document</span>.write(cars[i] + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  while 循环</span></div><div class="line"><span class="keyword">while</span> (i&lt;<span class="number">5</span>) &#123;</div><div class="line">    x=x + <span class="string">"The number is "</span> + i + <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-JavaScript-表单验证"><a href="#4-JavaScript-表单验证" class="headerlink" title="4. JavaScript 表单验证"></a>4. JavaScript 表单验证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateForm</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="built_in">document</span>.forms[<span class="string">"myForm"</span>][<span class="string">"email"</span>].value;</div><div class="line">	<span class="keyword">var</span> atpos = x.indexOf(<span class="string">"@"</span>);</div><div class="line">	<span class="keyword">var</span> dotpos = x.lastIndexOf(<span class="string">"."</span>);</div><div class="line">	<span class="keyword">if</span> (atpos &lt; <span class="number">1</span> || dotpos &lt; atpos + <span class="number">2</span> || dotpos + <span class="number">2</span> &gt;= x.length) &#123;</div><div class="line">		alert(<span class="string">"不是一个有效的 e-mail 地址"</span>);</div><div class="line">  		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-JavaScript-JSON"><a href="#5-JavaScript-JSON" class="headerlink" title="5. JavaScript JSON"></a>5. JavaScript JSON</h3><ul>
<li>JSON 是用于存储和传输数据的格式</li>
<li>JSON 通常用于服务端向网页传递数据</li>
<li>JSON 格式化后为 JavaScript 对象</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"sites"</span>:[</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Google"</span>, <span class="attr">"url"</span>:<span class="string">"www.google.com"</span>&#125;,</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Taobao"</span>, <span class="attr">"url"</span>:<span class="string">"www.taobao.com"</span>&#125;</div><div class="line">]&#125;</div></pre></td></tr></table></figure>
<p><strong>JSON 语法规则：</strong></p>
<p>数据为 键/值 对，数据由逗号分隔，==大括号保存对象，方括号保存数组==</p>
<p><strong>为 JSON 字符串创建对象：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">'&#123; "sites" : ['</span> +</div><div class="line">	<span class="string">'&#123; "name":"Runoob" , "url":"www.runoob.com" &#125;,'</span> +</div><div class="line">	<span class="string">'&#123; "name":"Google" , "url":"www.google.com" &#125;,'</span> +</div><div class="line">	<span class="string">'&#123; "name":"Taobao" , "url":"www.taobao.com" &#125; ]&#125;'</span>;</div><div class="line">	</div><div class="line">obj = <span class="built_in">JSON</span>.parse(text);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = obj.sites[<span class="number">1</span>].name + <span class="string">" "</span> + obj.sites[<span class="number">1</span>].url;</div></pre></td></tr></table></figure>
<hr>
<h3 id="Others："><a href="#Others：" class="headerlink" title="Others："></a>Others：</h3><h5 id="href-”-”-与-href-”javascript-void-0-”-的区别："><a href="#href-”-”-与-href-”javascript-void-0-”-的区别：" class="headerlink" title="href=”#” 与 href=”javascript:void(0)” 的区别："></a>href=”#” 与 href=”javascript:void(0)” 的区别：</h5><blockquote>
<p><code>#</code>包含了一个位置信息，默认的锚是 #top 也就是网页的上端。而javascript:void(0), 仅仅表示一个死链接。在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。</p>
<p>如果你要定义一个死链接请使用 javascript:void(0) </p>
</blockquote>
<h5 id="代码规范："><a href="#代码规范：" class="headerlink" title="代码规范："></a>代码规范：</h5><blockquote>
<p>大多 Web 服务器 (Apache, Unix) 对大小写敏感： london.jpg 不能通过 London.jpg 访问。</p>
<p>其他 Web 服务器 (Microsoft, IIS) 对大小写不敏感： london.jpg 可以通过 London.jpg 或 london.jpg 访问。</p>
<p>必须保持统一的风格，建议统一使用小写的文件名。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Head First HTML & CSS]]></title>
      <url>/2017/12/13/Head-First-HTML-CSS/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/html-css.jpg" alt="html-css"></p>
<h3 id="1-Elements"><a href="#1-Elements" class="headerlink" title="1. Elements:"></a>1. Elements:</h3><p><code>&lt;em&gt; &lt;/em&gt;</code> 斜体 <code>&lt;strong&gt; &lt;/strong&gt;</code>加粗 <code>&lt;blockquote&gt; &lt;/blockquote&gt;</code> 段引用<br>block 元素：<code>&lt;h1&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;blockquote&gt;</code><br>inline 元素：<code>&lt;em&gt;</code> <code>&lt;img&gt;</code> <code>&lt;q&gt;</code> </p>
<p>图片链接： <code>&lt;a&gt; &lt;/a&gt;</code> 内嵌 <code>img</code> 元素</p>
<h3 id="2-CSS-Id-和-Class"><a href="#2-CSS-Id-和-Class" class="headerlink" title="2.CSS Id 和 Class"></a>2.CSS Id 和 Class</h3><ul>
<li>id 选择器可以为标有 ==特定 id 的 HTML 元素== 指定特定的样式。HTML 元素以 id 属性来设置 id 选择器, CSS  中 id 选择器以 “#” 来定义。</li>
<li>class 选择器用于描述 ==一组元素的样式==，class 选择器有别于id选择器，class可以在 ==多个元素== 中使用。class 选择器在 HTML 中以 class 属性表示, 在 CSS 中，类选择器以一个点”.”号显示。</li>
</ul>
<a id="more"></a>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-11_15-24-40.png" alt="2017-12-11_15-24-40"></p>
<h3 id="3-插入样式表的方法："><a href="#3-插入样式表的方法：" class="headerlink" title="3.插入样式表的方法："></a>3.插入样式表的方法：</h3><ul>
<li>外部样式表，当样式表需要用于很多页面时</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>内部样式表，当单个文档需要特殊的样式时</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">body &#123;</span></div><div class="line"><span class="undefined">    background-color: linen;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">h1 &#123;</span></div><div class="line"><span class="undefined">    color: maroon;</span></div><div class="line"><span class="undefined">    margin-left: 40px;</span></div><div class="line"><span class="undefined">&#125; </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>内联样式，当样式仅需要在一个元素上应用一次时</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color:blue;margin-left:30px;"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>多重样式优先级：</strong><br>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</p>
</blockquote>
<h3 id="4-CSS-文本与字体"><a href="#4-CSS-文本与字体" class="headerlink" title="4. CSS 文本与字体"></a>4. CSS 文本与字体</h3><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-11_23-51-36.png" alt="2017-12-11_23-51-36"><br><strong>字体系列 font-family</strong></p>
<p>font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。</p>
<blockquote>
<p>注意: 如果字体系列的名称超过一个字，它必须用引号，如 Font Family：”Times New Roman”。</p>
</blockquote>
<p><strong>使用 Web 字体：<a href="https://fonts.google.com/" target="_blank" rel="external">Google Fonts</a></strong><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-12_00-26-11.png" alt="2017-12-12_00-26-11-w968"><br><strong>使用 Woff 字体：<a href="view-source:https://www.theverge.com/" target="_blank" rel="external">Homepage of THE VERGE</a></strong><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-12_00-29-18.png" alt="2017-12-12_00-29-18"><br><strong>字体大小：像素、百分比、倍数、关键字</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">14px</span>; &#125;</div><div class="line"><span class="selector-tag">h1</span>&#123; <span class="attribute">font-size</span>: <span class="number">150%</span>; &#125;</div><div class="line"><span class="selector-tag">h2</span>&#123; <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125; (倍数)</div><div class="line"><span class="selector-tag">h3</span>&#123; <span class="attribute">font-size</span>: small/large; &#125;</div></pre></td></tr></table></figure>
<p><strong>推荐方式：（ 后续只需改动<code>body</code>）</strong></p>
<blockquote>
<p>选择一个关键字（small 或 medium），指定其作为 <code>body</code> 规则中的字体大小。这相当于页面默认的字体大小。<br>使用 <code>em</code> 或百分数，相对于 <code>body</code> 字体大小指定其他元素的字体大小。</p>
</blockquote>
<p><strong>改变字体粗细：<code>font-weight</code></strong><br>normal, bold, lighter</p>
<p><strong>增加字体风格：<code>font-style</code></strong><br>italic（自带斜体风格）, oblique（浏览器将正常文字倾斜）</p>
<p><strong>字体颜色定义：</strong></p>
<ul>
<li>直接命名：silver, maroon, purple</li>
<li>RGB（80%, 40%, 0%）RGB（204, 102, 0）</li>
<li>十六进制：<code>#cc(R)66(G)00(B)</code><blockquote>
<p>一组颜色分量的两位数字相同，可以缩写成一位数字，<code>#cc6600</code> = <code>#c60</code></p>
</blockquote>
</li>
</ul>
<p><strong>文本对齐方式</strong><br>文本排列属性是用来设置文本的水平对齐方式。文本可居中或对齐到左或右,两端对齐。当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.date</span> &#123;<span class="attribute">text-align</span>:right;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.main</span> &#123;<span class="attribute">text-align</span>:justify;&#125;</div></pre></td></tr></table></figure>
<p><strong>文本装饰与大小写转换：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">line-through</span>;</div><div class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</div><div class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">overline</span>;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;<span class="attribute">text-transform</span>:uppercase;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;<span class="attribute">text-transform</span>:lowercase;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;<span class="attribute">text-transform</span>:capitalize;&#125;</div></pre></td></tr></table></figure>
<p><strong>font-variant 属性</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-class">.small</span> &#123; <span class="attribute">font-variant</span>:small-caps; &#125;</div></pre></td></tr></table></figure>
<p>font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小</p>
<h3 id="5-CSS-背景"><a href="#5-CSS-背景" class="headerlink" title="5. CSS 背景"></a>5. CSS 背景</h3><ul>
<li>background    简写属性，作用是将背景属性设置在一个声明中。</li>
<li>background-attachment    背景图像是否固定或者随着页面的其余部分滚动。</li>
<li>background-color    设置元素的背景颜色。</li>
<li>background-image    把图像设置为背景。</li>
<li>background-position    设置背景图像的起始位置。</li>
<li>background-repeat    设置背景图像是否及如何重复。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">body</span></div><div class="line"><span class="undefined">&#123;</span></div><div class="line"><span class="css">	<span class="selector-tag">background-image</span><span class="selector-pseudo">:url('img_tree.png')</span>;</span></div><div class="line"><span class="css">	<span class="selector-tag">background-repeat</span><span class="selector-pseudo">:no-repeat</span>;</span></div><div class="line"><span class="css">	<span class="selector-tag">background-position</span><span class="selector-pseudo">:right</span> <span class="selector-tag">top</span>;</span></div><div class="line"><span class="css">	<span class="selector-tag">margin-right</span><span class="selector-pseudo">:200px</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6-CSS-Box-Model-Border"><a href="#6-CSS-Box-Model-Border" class="headerlink" title="6. CSS Box Model / Border"></a>6. CSS Box Model / Border</h3><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/1cf28bca2738ab2474fb102ca936355b.png" alt="1cf28bca2738ab2474fb102ca936355b"></p>
<ul>
<li>Margin(外边距) - 清除边框外的区域，==外边距是透明的==。</li>
<li>Border(边框) - 围绕在内边距和内容外的边框。</li>
<li>Padding(内边距) - 清除内容周围的区域，==内边距是透明的==。</li>
<li>Content(内容) - 盒子的内容，显示文本和图像，内容与盒子边缘之间没有空间</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">line-height</span>:         1<span class="selector-class">.9em</span>;</div><div class="line"><span class="selector-tag">font-style</span>:          <span class="selector-tag">italic</span>;</div><div class="line"><span class="selector-tag">font-family</span>:         <span class="selector-tag">Georgia</span>, "<span class="selector-tag">Times</span> <span class="selector-tag">New</span> <span class="selector-tag">Roman</span>", <span class="selector-tag">Times</span>, <span class="selector-tag">serif</span>;</div><div class="line"><span class="selector-tag">color</span>:               <span class="selector-id">#444444</span>;</div><div class="line"><span class="selector-tag">border-color</span>:        <span class="selector-tag">white</span>;</div><div class="line"><span class="selector-tag">border-width</span>:        2<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">border-style</span>:        <span class="selector-tag">dashed</span>;</div><div class="line"><span class="selector-tag">background-color</span>:    <span class="selector-id">#a7cece</span>;</div><div class="line"><span class="selector-tag">padding</span>:             25<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">padding-left</span>:        80<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin</span>:              30<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin-right</span>:        250<span class="selector-tag">px</span>;</div><div class="line">background-image:    url(images/background.gif);</div><div class="line"><span class="selector-tag">background-repeat</span>:   <span class="selector-tag">no-repeat</span>;</div><div class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">top</span> <span class="selector-tag">left</span>;</div></pre></td></tr></table></figure>
<p><strong>8种边框样式：</strong><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-13_00-09-35.png" alt="2017-12-13_00-09-35"><br><strong>CSS 元素 Display(显示) 与 Visibility（可见性）</strong></p>
<p>隐藏一个元素可以通过把display属性设置为”none”，或把visibility属性设置为”hidden”。</p>
<ul>
<li>visibility：hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</li>
<li>display：none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</li>
</ul>
<p><strong>block 元素与 inline 元素的显示互换</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">span</span> &#123; <span class="attribute">display</span>:block; &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Nirvana<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Record: MTV Unplugged in New York<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Year: 1993<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">Output：</div><div class="line"></div><div class="line">Nirvana</div><div class="line">Record: MTV Unplugged in New York</div><div class="line">Year: 1993</div></pre></td></tr></table></figure>
<h3 id="7-CSS-定位、浮动、对齐"><a href="#7-CSS-定位、浮动、对齐" class="headerlink" title="7. CSS 定位、浮动、对齐"></a>7. CSS 定位、浮动、对齐</h3><ul>
<li>relative 定位：相对定位元素的定位是相对其正常位置。</li>
<li>absolute 定位：绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html></html></li>
<li>overflow：设置当元素的内容溢出其区域时发生的事情（<code>auto、hidden、scroll、visible、inherit</code>）</li>
<li>CSS 的 Float，会使元素向左或向右移动，其周围的元素也会重新排列。Float（浮动），往往是用于图像，但它在布局时一样非常有用。    </li>
<li>清除浮动 - 使用 clear。元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。clear 属性指定元素两侧不能出现浮动元素。</li>
</ul>
<h3 id="8-CSS-导航栏"><a href="#8-CSS-导航栏" class="headerlink" title="8. CSS 导航栏"></a>8. CSS 导航栏</h3><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-13_13-30-15.png" alt="2017-12-13_13-30-15"><br><strong>导航栏 = 链接列表</strong></p>
<p>导航条基本上是一个链接列表，所以使用 <code>&lt;ul&gt;</code> 和 <code>&lt;li&gt;</code> 元素非常有意义</p>
<p><strong>链接样式：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;      <span class="comment">/* 未访问链接*/</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已访问链接 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;  <span class="comment">/* 鼠标移动到链接上 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;  <span class="comment">/* 鼠标点击时 */</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Ex. 全屏高度固定导航条：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">body &#123;</span></div><div class="line"><span class="undefined">    margin: 0;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">ul &#123;</span></div><div class="line"><span class="undefined">    list-style-type: none;</span></div><div class="line"><span class="undefined">    margin: 0;</span></div><div class="line"><span class="undefined">    padding: 0;</span></div><div class="line"><span class="undefined">    width: 25%;</span></div><div class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></div><div class="line"><span class="undefined">    position: fixed;</span></div><div class="line"><span class="undefined">    height: 100%;</span></div><div class="line"><span class="undefined">    overflow: auto;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">li a &#123;</span></div><div class="line"><span class="undefined">    display: block;</span></div><div class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></div><div class="line"><span class="undefined">    padding: 8px 16px;</span></div><div class="line"><span class="undefined">    text-decoration: none;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#4CAF50</span>;</span></div><div class="line"><span class="undefined">    color: white;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not(.active)</span> &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#555</span>;</span></div><div class="line"><span class="undefined">    color: white;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"#home"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#contact"</span>&gt;</span>联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left:25%;padding:1px 16px;height:1000px;"</span>&gt;</span></div><div class="line">......</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>水平导航栏：</strong></p>
<p>有两种方法创建横向导航栏。使用内联(inline)或浮动(float)的列表项。这两种方法都很好，但如果想链接到具有相同的大小，必须使用浮动的方法。</p>
<h3 id="9-CSS-媒体"><a href="#9-CSS-媒体" class="headerlink" title="9. CSS 媒体"></a>9. CSS 媒体</h3><h4 id="Image-Gallary"><a href="#Image-Gallary" class="headerlink" title="Image Gallary"></a>Image Gallary</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-13_14-28-07.png" alt="2017-12-13_14-28-07"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.gallery</span> &#123;</span></div><div class="line"><span class="undefined">    margin: 5px;</span></div><div class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">    float: left;</span></div><div class="line"><span class="undefined">    width: 180px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.gallery</span><span class="selector-pseudo">:hover</span> &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#777</span>; <span class="comment">/* 鼠标放上时增加边框 */</span></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.gallery</span> <span class="selector-tag">img</span> &#123;</span></div><div class="line"><span class="undefined">    width: 100%;</span></div><div class="line"><span class="undefined">    height: auto;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.desc</span> &#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">padding</span>: 15<span class="selector-tag">px</span>; <span class="comment">/* 文本描述部分的 padding */</span></span></div><div class="line"><span class="undefined">    text-align: center;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"img_fjords.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img_fjords.jpg"</span> <span class="attr">alt</span>=<span class="string">"Trolltunga Norway"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>Add a description of the image here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"img_forest.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img_forest.jpg"</span> <span class="attr">alt</span>=<span class="string">"Forest"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>Add a description of the image here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 必知必会 Part II]]></title>
      <url>/2017/12/07/MySQL-Crash-Course-Part-II/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/mysql-banner.jpg" alt="mysql-banne"></p>
<h3 id="1-数据插入-INSERT"><a href="#1-数据插入-INSERT" class="headerlink" title="1. 数据插入 INSERT"></a>1. 数据插入 <code>INSERT</code></h3><p>用来插入或添加行到数据表，比如插入完整的行，插入行的一部分，插入多行，插入某些查询的结果。</p>
<h4 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h4><p>要求指定表名和被插入到新行中的值，对每个列必须提供一个值（没有值可以使用 NULL ）且各个列必须以它们在表定义中出现的次序填充。<br><code>INSERT INTO customers VALUS (NULL, &#39;Pep E. LaPew&#39;, &#39;100 Main Street&#39;, &#39;Los Angeles&#39;, &#39;CA&#39;, &#39;90046&#39;, &#39;USA&#39;, NULL, NULL)</code></p>
<a id="more"></a>
<p>由于上述语法高度依赖于表中列的定义次序，因此并不保证下一次表结构变动后各个列保持完全相同的次序，并不安全。更安全但繁琐的方法如下，即给定对应的列名<br><code>INSERT INTO customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) VALUES(&#39;Pep E. LaPew&#39;, &#39;100 Main Street&#39;, &#39;Los Angeles&#39;, &#39;CA&#39;, &#39;90046&#39;, &#39;USA&#39;, NULL, NULL);</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_23-32-43.png" alt="2017-12-06_23-32-43"></p>
<blockquote>
<p>给定列名时，如果表的定义允许，可以在 <code>INSERT</code> 语句中省略某些列，如果该列定义允许 NULL 值或该列有默认值；如果不满足以上条件，插入不成功。</p>
</blockquote>
<p>提高整体性能</p>
<blockquote>
<p>数据库经常被多个客户端访问，对处理什么请求以及用什么次序处理进行管理是 MySQL 的任务，<code>INSERT</code> 操作可能很耗时，而且可能降低等待处理的 <code>SELECT</code> 语句的性能，因此可以在 <code>INSERT</code> 和 <code>INTO</code> 之间插入关键字<code>LOW_PRIORITY</code></p>
</blockquote>
<h4 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h4><p>使用多条 <code>INSERT</code> 语句或者当每条语句的列名和次序都相同时，可以使用组合语句，用单条 <code>INSERT</code> 语句处理多个插入比使用多条语句快。<br><code>INSERT INTO customers( ) VALUES ( ), ( ), ( );</code></p>
<h4 id="插入检索出来的数据"><a href="#插入检索出来的数据" class="headerlink" title="插入检索出来的数据"></a>插入检索出来的数据</h4><p>由一条 <code>SELECT</code> 语句和一条 <code>INSERT</code> 语句组成<br><code>INSERT INTO customers(cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country) SELECT cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country FROM custnew;</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-07_00-27-36.png" alt="2017-12-07_00-27-36"></p>
<p><code>INSERT SELECT</code> 中 <code>SELECT</code> 语句也可以包含 <code>WHERE</code> 子句以过滤插入的数据</p>
<h3 id="2-更新和删除数据"><a href="#2-更新和删除数据" class="headerlink" title="2. 更新和删除数据"></a>2. 更新和删除数据</h3><h4 id="更新和修改表中的数据，可使用-UPDATE-语句"><a href="#更新和修改表中的数据，可使用-UPDATE-语句" class="headerlink" title="更新和修改表中的数据，可使用 UPDATE 语句"></a>更新和修改表中的数据，可使用 <code>UPDATE</code> 语句</h4><p>更新表中特定行或所有行。<code>UPDATE</code> 语句由 <em>要更新的表</em>、<em>列名和它们的新值</em>、<em>确定要更新行的过滤条件</em> 三部分组成。</p>
<p>Ex. 客户 10005 有了新的邮件地址需要更新：<br><code>UPDATE customers SET cust_email = &#39;elmer@fudd.com&#39; WHERE cust_id = 10005;</code></p>
<blockquote>
<p><code>WHERE</code> 语句作为结束，告诉 MySQL 更新哪一行</p>
</blockquote>
<h4 id="更新多个列的语法稍有不同"><a href="#更新多个列的语法稍有不同" class="headerlink" title="更新多个列的语法稍有不同"></a>更新多个列的语法稍有不同</h4><p><code>UPDATE customers SET cust_name = &#39;The Fudds&#39;, cust_email = &#39;elmer@fudd.com&#39; WHERE cust_id = 10005;</code></p>
<blockquote>
<p>如果用 <code>UPDATE</code> 语句更新多行中一行出现错误，整个 UPDATE 操作会被取消，可以用 <code>IGNORE</code> 关键字来在发生错误时继续更新</p>
</blockquote>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>从表中删除一行或多行<br><code>DELETE FROM customers WHERE cust_id = 10006;</code></p>
<blockquote>
<p><code>DELETE</code> 不需要列名或通配符，因为其删除整行而不是整列，删除指定的整列需要使用 <code>UPDATE</code> 语句将该列设为 NULL <code>UPDATE customers SET cust_state = NULL;</code></p>
</blockquote>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-07_01-00-05.png" alt="2017-12-07_01-00-05"><br>如果想从表中删除所有行，不要使用 <code>DELETE</code> 语句而要使用 <code>TRUNCATE TABLE</code> 语句，它完成相同的工作而且更快，实际上是删除原来的表并重建一个同名新表</p>
<h3 id="3-创建和操纵表"><a href="#3-创建和操纵表" class="headerlink" title="3. 创建和操纵表"></a>3. 创建和操纵表</h3><h4 id="用-CREATE-TABLE-语句创建新表"><a href="#用-CREATE-TABLE-语句创建新表" class="headerlink" title="用 CREATE TABLE 语句创建新表"></a>用 <code>CREATE TABLE</code> 语句创建新表</h4><p>必须给出新表的名字，表列的名字和定义，数据类型，主键列，是否使用 NULL 值等</p>
<blockquote>
<p>新表无法覆盖原来存在的同名表，必须手动删除它才能创建新表</p>
</blockquote>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-07_00-37-31.png" alt="2017-12-07_00-37-31"><br>正如所述，主键值必须唯一。即表中的每个行必须具有唯一的主键值。如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一。</p>
<h4 id="使用-AUTO-INCREMENT"><a href="#使用-AUTO-INCREMENT" class="headerlink" title="使用 AUTO_INCREMENT"></a>使用 <code>AUTO_INCREMENT</code></h4><p>每个表只允许一个 <code>AUTO_INCREMENT</code> 列，而且它必须被索引（比如使它成为主键）。<br><code>SELECT last_insert_id( )</code> 函数返回最后一个<code>AUTO INCREMENT</code> 值，可以用于后续的 MySQL语句。</p>
<h4 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h4><p>更新表定义可使用 <code>ALTER TABLE</code> 语句，但理想状态下，表中存储数据之后就不应该再被更新。</p>
<p>给表添加一个列：<br><code>ALTER TABLE vendors ADD vend_phone CHAR(20);</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-07_01-23-23.png" alt="2017-12-07_01-23-23"></p>
<p>删除刚刚添加的列：<br><code>ALTER TABLE vendors DROP COLOMN vend_phone;</code></p>
<h4 id="删除表-DROP-TABLE-customers"><a href="#删除表-DROP-TABLE-customers" class="headerlink" title="删除表 DROP TABLE customers;"></a>删除表 <code>DROP TABLE customers;</code></h4><h4 id="重命名表-RENAME-TABLE-customers2-TO-customers"><a href="#重命名表-RENAME-TABLE-customers2-TO-customers" class="headerlink" title="重命名表 RENAME TABLE customers2 TO customers;"></a>重命名表 <code>RENAME TABLE customers2 TO customers;</code></h4><h3 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h3><p>视图可以重用 SQL 语句；简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节；使用表的组成部分而不是整个表；保护数据；可以给用户授予表的特定部分的访问权限而不是整个表的访问权限；更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</p>
<h4 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a>视图的规则和限制</h4><p>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。<br>对于可以创建的视图数目没有限制。<br>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。<br>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。<br><code>ORDER BY</code> 可以用在视图中，但如果从该视图检索数据 <code>SELECT</code> 中也含有 <code>ORDER BY</code>，那么该视图中的 <code>ORDER BY</code> 将被覆盖。<br>视图不能索引，也不能有关联的触发器或默认值。<br>视图可以和表一起使用。例如，编写一条联结表和视图的 <code>SELECT</code> 语句。</p>
<h4 id="利用视图简化复杂联结"><a href="#利用视图简化复杂联结" class="headerlink" title="利用视图简化复杂联结"></a>利用视图简化复杂联结</h4><p><code>CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num;</code></p>
<p>从视图中检索订购了 TNT2 的客户：<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-07_01-34-31.png" alt="2017-12-07_01-34-31"></p>
<h4 id="用视图过滤不想要的数据"><a href="#用视图过滤不想要的数据" class="headerlink" title="用视图过滤不想要的数据"></a>用视图过滤不想要的数据</h4><p><code>CREATE VIEW customermaillist AS SELECT cust_id, cust_name, cust_email FROM customers WHERE cust_mail IS NOT NULL;</code></p>
<h3 id="End-Of-Part-II"><a href="#End-Of-Part-II" class="headerlink" title="End Of Part II"></a>End Of Part II</h3>]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> J2EE </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> JDBC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Think Different]]></title>
      <url>/2017/12/06/Think-Different/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/1200px-Apple_logo_Think_Different_vectorized.svg.jpg" alt="1200px-Apple_logo_Think_Different_vectorized.svg"></p>
<p>Here’s to the crazy ones. The misfits. The rebels. The trouble-makers. The round pegs in the square holes. The ones who see things differently. They’re not fond of rules, and they have no respect for the status-quo. You can quote them, disagree with them, glorify, or vilify them. But the only thing you can’t do is ignore them. Because they change things. They push the human race forward. And while some may see them as the crazy ones, we see genius. Because the people who are crazy enough to think they can change the world, are the ones who do.     —Apple</p>
<a id="more"></a>
<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://oxgw3nd2b.bkt.clouddn.com/Apple%20Steve%20Jobs%20The%20Crazy%20Ones%20-%20NEVER%20BEFORE%20AIRED%201997%20-%20%28Original%20Post%29.mp4","pic":"http://oxgw3nd2b.bkt.clouddn.com/thinkdifferent.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      
        <categories>
            
            <category> 科技 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apple </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 必知必会 Part I]]></title>
      <url>/2017/12/06/MySQL-Crash-Course-Part-I/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_20-23-52.png" alt="2017-12-05_20-23-52"></p>
<h3 id="1-主键-primary-key"><a href="#1-主键-primary-key" class="headerlink" title="1. 主键 primary key:"></a>1. 主键 primary key:</h3><p><strong>唯一能够区分表中每个行（<code>订单ID</code> <code>雇员ID</code> <code>security ID</code>）</strong></p>
<p>· 任意两行都不具有相同的主键值；每个行都必须具有一个主键值（不允许 NULL ）；使用多个列作为主键时，所有列值的组合必须是唯一的（单个列的值可以不唯一）；不更新主键列中的值；不重用主键列的值；不在主键列中使用可能会更改该的值。</p>
<h3 id="2-数据库结构-row-coloumn"><a href="#2-数据库结构-row-coloumn" class="headerlink" title="2. 数据库结构 row coloumn"></a>2. 数据库结构 row coloumn</h3><p>Columns 包含字段名、数据类型、是否允许 NULL、键信息、默认值以及其他信息（<code>auto_increment</code>–id类似字段的自动增量）。</p>
<a id="more"></a>
<h3 id="3-检索语句-SELECT"><a href="#3-检索语句-SELECT" class="headerlink" title="3. 检索语句 SELECT"></a>3. 检索语句 SELECT</h3><h4 id="·-选择多列，列名之间加逗号"><a href="#·-选择多列，列名之间加逗号" class="headerlink" title="· 选择多列，列名之间加逗号"></a>· 选择多列，列名之间加逗号</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_20-45-51.png" alt="2017-12-05_20-45-51"></p>
<h4 id="·-检索有不同值的列"><a href="#·-检索有不同值的列" class="headerlink" title="· 检索有不同值的列"></a>· 检索有不同值的列</h4><p>使用 DISTINCT 关键字，此关键字指示 MySQL 只返回不同的值。DISTINCT 关键字应用于所有列。</p>
<h4 id="·-限制结果"><a href="#·-限制结果" class="headerlink" title="· 限制结果"></a>· 限制结果</h4><p>可使用 LIMIT 子句，<code>SELECT prod_name FROM products LIMIT 5;</code> 要得出下一个 5 行，可以指定开始行和行数，<code>SELECT prod_name FROM products LIMIT 5,5;</code> ==检索出来的第一行是 0 而不是 1== </p>
<h4 id="·-MySQL-5-开始支持另一种语法-OFFSET，即-LIMIT-3-4-LIMIT-4-OFFSET-3"><a href="#·-MySQL-5-开始支持另一种语法-OFFSET，即-LIMIT-3-4-LIMIT-4-OFFSET-3" class="headerlink" title="· MySQL 5 开始支持另一种语法 OFFSET，即 LIMIT 3,4 = LIMIT 4 OFFSET 3"></a>· MySQL 5 开始支持另一种语法 OFFSET，即 <code>LIMIT 3,4</code> = <code>LIMIT 4 OFFSET 3</code></h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_20-56-46.png" alt="2017-12-05_20-56-46"></p>
<h4 id="·-完全限定表名与列名"><a href="#·-完全限定表名与列名" class="headerlink" title="· 完全限定表名与列名"></a>· 完全限定表名与列名</h4><p><code>SELECT products.prod_name FROM crAShcourse.products;</code></p>
<h3 id="4-排序语句-ORDER-BY"><a href="#4-排序语句-ORDER-BY" class="headerlink" title="4. 排序语句 ORDER BY"></a>4. 排序语句 ORDER BY</h3><h4 id="·-单列排序"><a href="#·-单列排序" class="headerlink" title="· 单列排序"></a>· 单列排序</h4><p>排序列可以是 SELECT 的也可以是非 SELECT 的<br><code>SELECT prod_name FROM products ORDER BY prod_name;</code><br><code>SELECT prod_name, prod_id FROM products ORDER BY prod_price;</code></p>
<h4 id="·-多列排序"><a href="#·-多列排序" class="headerlink" title="· 多列排序"></a>· 多列排序</h4><p><code>SELECT prod_name, prod_id, prod_price FROM products ORDER BY prod_name, prod_id;</code></p>
<h4 id="·-升降-DESC-ASC"><a href="#·-升降-DESC-ASC" class="headerlink" title="· 升降 DESC/ASC"></a>· 升降 DESC/ASC</h4><p>只对关键字前的一列有效，如果要对多列进行升降排序，需要为每列指定 <code>DESC/ASC</code> 关键字（Dicionary 类数据库排序中，A = a，其他需要请求 DBA 帮助）</p>
<h4 id="·-ORDER-BY-需位于-FROM-后-LIMIT-需位于-ORDER-BY-后"><a href="#·-ORDER-BY-需位于-FROM-后-LIMIT-需位于-ORDER-BY-后" class="headerlink" title="· ORDER BY 需位于 FROM 后, LIMIT 需位于 ORDER BY 后"></a>· ORDER BY 需位于 FROM 后, LIMIT 需位于 ORDER BY 后</h4><h3 id="5-过滤数据语句-WHERE"><a href="#5-过滤数据语句-WHERE" class="headerlink" title="5. 过滤数据语句 WHERE"></a>5. 过滤数据语句 WHERE</h3><p><code>SELECT prod_name, prod_id FROM products WHERE prod_price = 2.5;</code></p>
<h4 id="·-同时使用-ORDER-BY-和-WHERE-时，ORDER-BY-需要位于-WHERE-后"><a href="#·-同时使用-ORDER-BY-和-WHERE-时，ORDER-BY-需要位于-WHERE-后" class="headerlink" title="· 同时使用 ORDER BY 和 WHERE 时，ORDER BY 需要位于 WHERE 后"></a>· 同时使用 ORDER BY 和 WHERE 时，ORDER BY 需要位于 WHERE 后</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_21-37-14.png" alt="2017-12-05_21-37-14"></p>
<h4 id="·-空值检查"><a href="#·-空值检查" class="headerlink" title="· 空值检查"></a>· 空值检查</h4><p>NULL 与包含 0、空字符串或仅仅包含空格不同<br><code>SELECT prod_name FROM products WHERE prod_price is NULL;</code></p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_21-50-42.png" alt="2017-12-05_21-50-42"></p>
<h4 id="·-数据过滤操作符"><a href="#·-数据过滤操作符" class="headerlink" title="· 数据过滤操作符"></a>· 数据过滤操作符</h4><p><code>=</code> <code>!=</code> <code>&lt;&gt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>&gt;</code> <code>&lt;</code> <code>BETWEEN AND</code></p>
<p>####· AND OR 逻辑操作符<br>AND 优先级更高，搭配 OR 使用需要圆括号<br><code>SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) and prod_price &gt;=10;</code></p>
<h4 id="·-操作符-OR-与-IN-相同"><a href="#·-操作符-OR-与-IN-相同" class="headerlink" title="· 操作符 OR 与 IN 相同"></a>· 操作符 OR 与 IN 相同</h4><p><code>vend_id = 1002 OR vend_id = 1003</code>  等同于  <code>vend_id IN (1002,1003)</code></p>
<p>IN 操作符语法更清楚直观，计算次序更容易管理，执行更快，可以包含其他 SELECT 子句</p>
<h4 id="·-NOT-操作符，有且仅有一个功能，否定它之后跟的任何条件。MySQL-中的-NOT-语句支持对-IN、BETWEEN、EXISTS-语句取反"><a href="#·-NOT-操作符，有且仅有一个功能，否定它之后跟的任何条件。MySQL-中的-NOT-语句支持对-IN、BETWEEN、EXISTS-语句取反" class="headerlink" title="· NOT 操作符，有且仅有一个功能，否定它之后跟的任何条件。MySQL 中的 NOT 语句支持对 IN、BETWEEN、EXISTS 语句取反"></a>· NOT 操作符，有且仅有一个功能，否定它之后跟的任何条件。MySQL 中的 NOT 语句支持对 IN、BETWEEN、EXISTS 语句取反</h4><h3 id="6-通配符过滤-LIKE"><a href="#6-通配符过滤-LIKE" class="headerlink" title="6. 通配符过滤 LIKE"></a>6. 通配符过滤 LIKE</h3><h4 id="·-通配符"><a href="#·-通配符" class="headerlink" title="· %通配符"></a>· %通配符</h4><p>任何字符出现的任意次数，% 代表搜索中给定位置的 0 个、1 个或多个字符，但不能匹配 NULL</p>
<p><code>SELECT prod_name FROM products WHERE prod_name LIKE &#39;jet%&#39;;</code> 检索以 jet 开头、后跟任意字符的词<br><code>SELECT prod_name FROM products WHERE prod_name LIKE &#39;%jet%&#39;;</code> 检索以任意字符开头和结尾，中间包含 jet 的词</p>
<h4 id="·-下划线通配符"><a href="#·-下划线通配符" class="headerlink" title="· (_)下划线通配符"></a>· (_)下划线通配符</h4><p>用途与%一样，但匹配单个字符而非多个字符，其中搜索 1 要求匹配两个通配符，因此 .5 ton anvil 不显示；与 % 能够匹配 0 个字符不同，_只能匹配一个字符，不能多也不能少<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_22-29-07.png" alt="2017-12-05_22-29-07"></p>
<h3 id="7-正则表达式-REGEXP"><a href="#7-正则表达式-REGEXP" class="headerlink" title="7. 正则表达式 REGEXP"></a>7. 正则表达式 REGEXP</h3><h4 id="·-需要大小写时用-BINARY"><a href="#·-需要大小写时用-BINARY" class="headerlink" title="· 需要大小写时用 BINARY"></a>· 需要大小写时用 BINARY</h4><p><code>SELECT prod_name FROM products WHERE prod_name REGEXP BINARY &#39;TON&#39;;</code></p>
<h4 id="·-进行-OR-匹配用-“-”，多个-“-”-可并入多个正则表达式"><a href="#·-进行-OR-匹配用-“-”，多个-“-”-可并入多个正则表达式" class="headerlink" title="· 进行 OR 匹配用 “ | ”，多个 “ | ” 可并入多个正则表达式"></a>· 进行 OR 匹配用 “ | ”，多个 “ | ” 可并入多个正则表达式</h4><p><code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;anvil|et&#39;;</code></p>
<h4 id="·-匹配几个字符之一"><a href="#·-匹配几个字符之一" class="headerlink" title="· 匹配几个字符之一"></a>· 匹配几个字符之一</h4><p><code>&#39;[123] ton&#39;</code> 为 <code>&#39;[1|2|3] ton&#39;</code> 的缩写，不等于 <code>&#39;1|2|3 ton&#39;</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_22-49-39.png" alt="2017-12-05_22-49-39"><br>匹配范围时，<code>[0123456789]</code> 等同于 <code>[0-9]</code>，同样的，<code>[a-z]</code> 可以匹配所有字母<br>匹配特殊字符时，使用 <code>\\</code> 进行前导，如默认情况下 <code>&#39;.&#39;</code> 匹配所有结果，而 <code>&#39;\\.&#39;</code> 只匹配含有 <code>“.”</code> 的记录</p>
<h4 id="·-匹配多个实例"><a href="#·-匹配多个实例" class="headerlink" title="· 匹配多个实例"></a>· 匹配多个实例</h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_23-08-58.png" alt="2017-12-05_23-08-58"><br>需要解说一下，<code>\\(</code>匹配 <code>(</code>，<code>[0-9]</code> 匹配任意数字（这个例子中为 1 和 5), <code>sticks？</code> 匹配 stick 和 sticks (s 后的 <code>？</code> 使 s 可选，因为 <code>？</code> 匹配它前面的任何字符的 0 次或 1 次出现，<code>\\)</code> 匹配<code>)</code>。没有 <code>？</code>，匹配 stick 和 sticks 会非常困难。</p>
<p>分析如前所述，<code>[:digit:]</code> 匹配任意数字，因而它为数字的一个集合。<code>{4}</code> 确切地要求它前面的字符（任意数字）出现 4 次，所以 <code>[[:digit:]] {4}</code> 匹配连在一起的任意 4 位数字。<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_23-23-10.png" alt="2017-12-05_23-23-10"></p>
<h4 id="·-定位符：匹配-特定位置-的文本"><a href="#·-定位符：匹配-特定位置-的文本" class="headerlink" title="· 定位符：匹配 特定位置 的文本"></a>· 定位符：匹配 <em>特定位置</em> 的文本</h4><p><code>^</code> 文本的开始、<code>$</code> 文本的结尾、<code>[[:&lt;:]]</code> 词的开始、<code>[[:&gt;:]]</code> 词的结尾<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-05_23-46-39.png" alt="2017-12-05_23-46-39"></p>
<h3 id="8-创建计算字段"><a href="#8-创建计算字段" class="headerlink" title="8. 创建计算字段"></a>8. 创建计算字段</h3><p>如果想在一个字段中既显示公司名，又显示公司的地址，但这两个信息一般包含在不同的表列中。城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签打印程序却需要把它们作为一个恰当格式的字段检索出来。列数据是大小写混合的，但报表程序需要把所有数据按大写表示出来。</p>
<p>Vendors 表包含供应商名和位置信息。假如要生成一个供应商报表，需要在供应商的名字中按照 <code>name (location）</code> 这样的格式列出供应商的位置。此报表需要单个值，而表中数据存储在两个列 <code>vend_name</code>  和 <code>vend_country</code> 中。此外，需要用括号将 <code>vend_country</code> 括起来，这些东西都没有明确存储在数据库表中。</p>
<p><code>Concat( )</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_12-23-45.png" alt="2017-12-06_12-23-45"><br><code>RTrim( )</code>  <code>LRrim( )</code> 去掉左右两边的空格<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_13-08-30.png" alt="2017-12-06_13-08-30"><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_12-40-06.png" alt="2017-12-06_12-40-06"><br>使用别名：<code>SELECT Concat(RTrim(vend_name), &#39; (&#39;, RTrim(vend_COUNTry), &#39;)&#39;) AS vend_title FROM vendors;</code>  并不新建一个列</p>
<p>执行计算：<code>SELECT prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems WHERE order_num = 20005;</code> 可以用圆括号来限制运算符执行顺序</p>
<h3 id="9-使用数据处理函数"><a href="#9-使用数据处理函数" class="headerlink" title="9. 使用数据处理函数"></a>9. 使用数据处理函数</h3><p>函数没有 SQL 语句的可移植性强，使用时应做好代码注释</p>
<h4 id="·-文本处理函数-MySQL-5-7-StrINg-Functions"><a href="#·-文本处理函数-MySQL-5-7-StrINg-Functions" class="headerlink" title="· 文本处理函数  MySQL 5.7 StrINg Functions"></a>· 文本处理函数  <a href="https://dev.mysql.com/doc/refman/5.7/en/strINg-functions.html" target="_blank" rel="external">MySQL 5.7 StrINg Functions</a></h4><p><code>Upper( )</code> 将文本转换为大写、<code>Soundex( )</code> 返回文本串为描述其语音表示的字母数字模式</p>
<h4 id="·-时间日期处理函数-MySQL-5-7-Data-and-Time-Functions"><a href="#·-时间日期处理函数-MySQL-5-7-Data-and-Time-Functions" class="headerlink" title="· 时间日期处理函数 MySQL 5.7 Data and Time Functions"></a>· 时间日期处理函数 <a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html" target="_blank" rel="external">MySQL 5.7 Data and Time Functions</a></h4><p><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_13-19-08.png" alt="2017-12-06_13-19-08"><br>处理 period of time 的几种方法:<br><code>SELECT cust_id, order_num FROM orders WHERE Date(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-09-30&#39;;</code><br><code>SELECT cust_id, order_num FROM orders WHERE Year(order_date) = 2005 AND Month(order_date) = 9;</code></p>
<h4 id="·-汇总函数-AVG-SUM-COUNT-MIN-MAX"><a href="#·-汇总函数-AVG-SUM-COUNT-MIN-MAX" class="headerlink" title="· 汇总函数  AVG( ) SUM( ) COUNT( ) MIN( ) MAX( )"></a>· 汇总函数  <code>AVG( )</code> <code>SUM( )</code> <code>COUNT( )</code> <code>MIN( )</code> <code>MAX( )</code></h4><p><code>COUNT( )</code> 忽略 NULL<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_13-35-43.png" alt="2017-12-06_13-35-43"><br><code>MAX( )</code>  可以用于文本，如果数据按相应的列排序，<code>MAX( )</code> 返回最后一行<br><code>MIN( )</code>  可以用于文本，如果数据按相应的列排序，<code>MIN( )</code> 返回最前面的行，并忽略 NULL 值</p>
<p><code>SUM( )</code> 可以用来合计计算值，忽略 NULL 值  <code>SELECT SUM(item_price*quantity) AS total_price FROM orderitems WHERE order_num = 20005;</code></p>
<p><code>AVG( )</code> 可以使用 DISTNCT 函数，只返回不同价格 produc 的价格平均值（2.5，10 只计算一个） <code>SELECT avg(distINct prod_price) AS avg FROM products WHERE vend_id = 1003;</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_13-47-33.png" alt="2017-12-06_13-47-33"><br>如果指定列名，则 <code>DISTINCT</code> 只能用于 <code>COUNT（ ）</code>。<code>DISTINCT</code>不能用于 <code>COUNT（*）</code>，因此不允许使用 <code>COUNT  (DISTINCT）</code>，否则会产生错误。类似地，<code>DISTINCT</code> 必须使用列名，不能用于计算或表达式。</p>
<p>组合聚集函数：SELECT 可根据需要包含多个聚集函数<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_13-55-57.png" alt="2017-12-06_13-55-57"></p>
<h4 id="·-分组数据"><a href="#·-分组数据" class="headerlink" title="· 分组数据"></a>· 分组数据</h4><p><code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id;</code></p>
<p>· <code>GROUP BY</code> 子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。<br>· 如果在 <code>GROUP BY</code> 子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。<br>· <code>GROUP BY</code> 子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 <code>GROUP BY</code> 子句中指定相同的表达式。不能使用别名。<br>· 除聚集计算语句外，<code>SELECT</code> 语句中的每个列都必须在 <code>GROUP BY</code> 子句中给出。<br>· 如果分组列中具有 NULL 值，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组。<br>· <code>GROUP BY</code> 子句必须出现在 <code>WHERE</code> 子句之后，<code>ORDER BY</code> 子句之前。</p>
<p><code>WHERE</code> 过滤行，<code>HAVING</code> 过滤分组<br><code>SELECT cust_id ,COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;= 2;</code> 中，<code>WHERE</code> 不起作用<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_14-06-19.png" alt="2017-12-06_14-06-19"><br>· 分组排序 <code>GROUP BY</code> / <code>ORDER BY</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_14-43-10.png" alt="2017-12-06_14-43-10"></p>
<h4 id="SELECT-子句顺序"><a href="#SELECT-子句顺序" class="headerlink" title="SELECT 子句顺序"></a>SELECT 子句顺序</h4><table>
<thead>
<tr>
<th></th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td>LIMIT</td>
<td>要检索的行数</td>
<td>否</td>
</tr>
</tbody>
</table>
<h3 id="10-使用子查询"><a href="#10-使用子查询" class="headerlink" title="10. 使用子查询"></a>10. 使用子查询</h3><p><code>SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = &#39;TNT2&#39;);</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_14-55-33.png" alt="2017-12-06_14-55-33"><br><code>SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = &#39;TNT2&#39;));</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_14-57-44.png" alt="2017-12-06_14-57-44"></p>
<h4 id="·-作为计算字段使用子查询，需要限定列名"><a href="#·-作为计算字段使用子查询，需要限定列名" class="headerlink" title="· 作为计算字段使用子查询，需要限定列名"></a>· 作为计算字段使用子查询，需要限定列名</h4><p><code>SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_name;</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_15-13-50.png" alt="2017-12-06_15-13-50"></p>
<h3 id="11-联结（Join）表"><a href="#11-联结（Join）表" class="headerlink" title="11. 联结（Join）表"></a>11. 联结（Join）表</h3><h4 id="·-检索的两个列分别位于两个表中，需要完全限定列名"><a href="#·-检索的两个列分别位于两个表中，需要完全限定列名" class="headerlink" title="· 检索的两个列分别位于两个表中，需要完全限定列名"></a>· 检索的两个列分别位于两个表中，需要完全限定列名</h4><p><code>SELECT vend_name, prod_name, prod_price FROM vendors, products WHERE vendors.vend_id = products.vend_id ORDER BY vend_name, prod_name;</code></p>
<h4 id="·-笛卡儿积（cartesian-product）"><a href="#·-笛卡儿积（cartesian-product）" class="headerlink" title="· 笛卡儿积（cartesian product）"></a>· 笛卡儿积（cartesian product）</h4><p>由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p>
<h4 id="·-联结多个表"><a href="#·-联结多个表" class="headerlink" title="· 联结多个表"></a>· 联结多个表</h4><p><code>SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id and orderitems.prod_id = products.prod_id and order_num = 20005;</code><br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_15-31-52.png" alt="2017-12-06_15-31-52"></p>
<h4 id="·-自联结"><a href="#·-自联结" class="headerlink" title="· 自联结"></a>· 自联结</h4><p>查询 products 表中供应商与商品名为 ‘DRNTR’ 相同的商品<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_15-42-29.png" alt="2017-12-06_15-42-29"></p>
<h4 id="·-外部联结-LEFT-RIGHT-OUTER-JOIN-ON"><a href="#·-外部联结-LEFT-RIGHT-OUTER-JOIN-ON" class="headerlink" title="· 外部联结 LEFT/RIGHT OUTER JOIN ON"></a>· 外部联结 <code>LEFT/RIGHT OUTER JOIN ON</code></h4><p>必须使用 LEFT/RIGHT 关键字指定包含所有行的表；<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_17-04-14.png" alt="2017-12-06_17-04-14"></p>
<h4 id="·-使用-UNION-求两个-SELECT-语句的并集"><a href="#·-使用-UNION-求两个-SELECT-语句的并集" class="headerlink" title="· 使用 UNION 求两个 SELECT 语句的并集"></a>· 使用 <code>UNION</code> 求两个 <code>SELECT</code> 语句的并集</h4><p>不管查询结构是否包含重复，可简化复杂语句的 <code>WHERE</code> 操作<br><code>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5 UNION SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001, 1002) ORDER BY vend_id, prod_price;</code></p>
<h3 id="12-使用全文本搜索"><a href="#12-使用全文本搜索" class="headerlink" title="12. 使用全文本搜索"></a>12. 使用全文本搜索</h3><p>在创建表时启用全文本搜索支持 <code>FULLTEXT( )</code></p>
<h4 id="使用查询扩展"><a href="#使用查询扩展" class="headerlink" title=". 使用查询扩展"></a>. 使用查询扩展</h4><p>这次返回了 7 行。第一行包含词 anvils，因此等级最高。第二分析行与 anvils 无关，但因为它包含第一行中的两个词（customer 和 recommend），所以也被检索出来。第 3 行也包含这两个相同的词，但它们在文本中的位置更靠后且分开得更远，因此也包含这一行，但等级为第三。第三行确实也没有涉及 anvils（按它们的产品名）。正如所见，查询扩展极大地增加了返回的行数，但这样做也增加了你实际上并不想要的行的数目。<br><img src="http://oxgw3nd2b.bkt.clouddn.com/2017-12-06_17-29-13.png" alt="2017-12-06_17-29-13"></p>
<h4 id="·-布尔文本搜索"><a href="#·-布尔文本搜索" class="headerlink" title="· 布尔文本搜索"></a>· 布尔文本搜索</h4><p>包含匹配词 heavy，但 -rope<em> 表示不包含以 rope 开头的词： `SELECT note_text FROM productnotes WHERE MATCH(note_text) AGAINST(‘heavy -rope</em>‘ IN BOOLEAN MODE);`</p>
<p>匹配包含词 rabbit 和 bait 的行： <code>SELECT note_text FROM product notes WHERE MATCH(note_text) AGAINST(&#39;+rabbit +bait&#39; IN BOOLEAN MODE);</code></p>
<p>没有指定操作符，这个搜索匹配包含 rabbit 和 bait 中的至少一个词的行： <code>SELECT note_text FROM product notes WHERE MATCH(note_text) AGAINST(&#39;rabbit bait&#39; IN BOOLEAN MODE);</code></p>
<p>这个搜索匹配短语 rabbit bait 而不是匹配两个词 rabbit 和 bait： <code>SELECT note_text FROM product notes WHERE MATCH(note_text) AGAINST(&#39; &quot;rabbit bait&quot; &#39; IN BOOLEAN MODE);</code></p>
<p>匹配 rabbit 和 carrot，增加前者的等级，降低后者的等级： <code>SELECT note_text FROM product notes WHERE MATCH(note_text) AGAINST(&#39; &gt;rabbit &lt;carrot &#39; IN BOOLEAN MODE);</code></p>
<p>匹配词 safe 和 combINation，降低后者的等级： <code>SELECT note_text FROM product notes WHERE MATCH(note_text) AGAINST(&#39; +safe +(&lt; combINation) &#39; IN BOOLEAN MODE);</code></p>
<h3 id="End-of-Part-I"><a href="#End-of-Part-I" class="headerlink" title="End of Part I"></a>End of Part I</h3>]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> J2EE </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> JDBC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[廉价，素质，人权与公权力滥用]]></title>
      <url>/2017/12/05/Cheap-quality-abuse-of-human-rights-and-public-power/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/p2436227324.jpg" alt="p2436227324"></p>
<p>中国人无疑是世界上最能隐忍的群体之一。</p>
<p>离开养尊处优的媒体圈子，你发现只能以穷游的方式去远方；辗转于地理学过却没走过的京九贵昆湘黔浙赣，吐槽联通出了城就傻逼的同时作为基本是孤品的一类旅客开始阅人无数。</p>
<p>高铁滚滚洪流之下，如今的绿皮火车自然以四海为家的农民工居多，但最明显的也只见于皖鲁之间；大多是一眼就能见生活所迫的碌碌迁徙者，间或有穿戴尚可的一级站之间的短途客，一身廉价西装工牌还没来得及摘的打工者，城镇企业家打扮腰揣几把车钥匙的生意人，与我也不清楚有没有钱的学生。虽然那扛不动蛇皮口袋的身躯着实可怜，而吐槽上了半车实实在在的民工可能偷着抽烟不容易管的列车员倒也滑稽。各地铁路局也风格迥异，以南昌职业素养最高，青岛次之，西安最糟，普天之下不得不感叹基建狂魔蛮荒的内心。</p>
<a id="more"></a>
<p>道听听到最多的莫过于我在xx呆过许多年这样的开头，虽然我经常背对他们，仍不难听出话语洋溢至脸上的走出来的自豪神情，即使如今仍不断被迫迁徙。而人群属性似乎注定了他们也有更多的弯路故事，比如我哥输掉了三轮车，我也输掉了，所以不得已出来打了几年工之类；大概都无暇顾及自己还是不是被总书记牵挂着。</p>
<p>更有，一家四口、期间尚有不足岁的婴儿，车厢空隙席地而睡，于是你都分不清建议其他出土文物般的人是不是该洗洗衣服再来坐车以示对别人的尊重这件事是不是政治正确。</p>
<p>也时常有游离于法外之地的“准传销者”，对落单的老人现场施法，以推销他们董事长十几岁自创中药企至今已治愈多少癌症的良方。</p>
<p>更多的，则是日常打工的家长里短，北方媳妇儿不爱洗衣服。除了男的钟爱乐福鞋，女的钟爱皮裤，不少人排斥读书教育与新事物，而对假药、封建迷信、TG都有着天真的执念。</p>
<p>公权力无孔不入的肆意侵入，高铁尚且每过一站布施几个红头文件，绿皮火车就干脆不考虑时宜的用抵挡不住的音量灌输所谓旅行文化，好似几年前去西安的夜车上被无数人建议过最好开小点暖气却始终一脸茫然的列车员。和谐社会，没有做“人”的机会。这是跟贫穷一样可悲的事情。</p>
<p>世界那么大。</p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 中国 </tag>
            
            <tag> 游记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 惰性初始化]]></title>
      <url>/2017/11/14/Lazy-Instantiation-of-Java/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Array-in-Java-methods-initialization-with-example.jpg" alt="Array-in-Java-methods-initialization-with-example"></p>
<h3 id="为什么要使用惰性初始化："><a href="#为什么要使用惰性初始化：" class="headerlink" title="为什么要使用惰性初始化："></a>为什么要使用惰性初始化：</h3><p>因为类中为基本类型时，能够自动被初始化为0，但是对象引用会被初始化为null。编译器不是简单的为每一个引用创建对象创建默认对象，这一点是很有用的，因为真要那样的话，会在很多情况下增加很多开销。那么如果想初始化这些引用，就可以在代码中的很多位置进行，其中“惰性初始化”是其中的一种方式。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</div><div class="line">    String s;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Simple</span><span class="params">(String si)</span> </span>&#123;</div><div class="line">        s = si;</div><div class="line">    &#125;<span class="comment">//构造函数,内部为构造变量赋值</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125; <span class="comment">//复写</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String sstr)</span> </span>&#123;</div><div class="line">        s = sstr;</div><div class="line">    &#125;<span class="comment">//普通函数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Second</span> </span>&#123;</div><div class="line">    Simple simple;</div><div class="line">    String s;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Second</span> <span class="params">(String si)</span> </span>&#123;</div><div class="line">        s = si;</div><div class="line">    &#125;<span class="comment">//构造函数,内部为变量赋值</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;<span class="comment">//单纯检测simple是否已经创建.</span></div><div class="line">        <span class="keyword">if</span>(simple == <span class="keyword">null</span>)</div><div class="line">            System.out.println(<span class="string">"simple is not initlized"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            System.out.println(<span class="string">"simple is initlized"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Simple <span class="title">lazy</span><span class="params">()</span> </span>&#123;<span class="comment">//检测simple是否已经创建,如果没有创建就创建一个</span></div><div class="line">        <span class="keyword">if</span>(simple == <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"simple is creating"</span>);</div><div class="line">            simple = <span class="keyword">new</span> Simple(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> simple;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Simple <span class="title">getSimple</span><span class="params">()</span> </span>&#123;<span class="comment">//获取simple的值</span></div><div class="line">        <span class="keyword">return</span> lazy();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimple</span><span class="params">(String sNew)</span> </span>&#123;<span class="comment">//设定simple的值</span></div><div class="line">        lazy().setString(sNew);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="comment">//复写tosring()方法,输出</span></div><div class="line">        <span class="keyword">return</span> lazy().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testLazy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Second second = <span class="keyword">new</span> Second(<span class="string">"intit String"</span>);</div><div class="line">        second.check();</div><div class="line">        <span class="comment">//输出:simple is not initlized</span></div><div class="line">        <span class="comment">//同时为second类中的变量s赋值为:s="intit String"</span></div><div class="line">        System.out.println(second.getSimple());</div><div class="line">        <span class="comment">//创建simple,为simple赋值:simple="intit String"</span></div><div class="line">        <span class="comment">//输出:simple is creating</span></div><div class="line">        <span class="comment">//    intit String</span></div><div class="line">        second.check();</div><div class="line">        <span class="comment">//输出:simple is initlized</span></div><div class="line">        second.setSimple(<span class="string">"New String"</span>);</div><div class="line">        <span class="comment">//输出:intit String</span></div><div class="line">        System.out.println(second);</div><div class="line">        <span class="comment">//输出:New String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2SE </tag>
            
            <tag> Coding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 的静态变量、静态方法、静态类]]></title>
      <url>/2017/11/09/Static-in-Java/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/stack%20and%20heap%E5%89%AF%E6%9C%AC.jpg" alt="maxresdefault"></p>
<h4 id="静态变量和静态方法都属于静态对象，它与非静态对象的差别需要做个说明。"><a href="#静态变量和静态方法都属于静态对象，它与非静态对象的差别需要做个说明。" class="headerlink" title="静态变量和静态方法都属于静态对象，它与非静态对象的差别需要做个说明。"></a>静态变量和静态方法都属于静态对象，它与非静态对象的差别需要做个说明。</h4><blockquote>
<h3 id="Java静态对象和非静态对象有什么区别？"><a href="#Java静态对象和非静态对象有什么区别？" class="headerlink" title="Java静态对象和非静态对象有什么区别？"></a>Java静态对象和非静态对象有什么区别？</h3><p>比对如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>非静态对象</th>
<th>静态对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>拥有属性</td>
<td>是类共同拥有的</td>
<td>是类各对象独立拥有的</td>
</tr>
<tr>
<td>内存分配</td>
<td>内存空间上是固定的</td>
<td>空间在各个附属类里面分配</td>
</tr>
<tr>
<td>分配顺序</td>
<td>先分配静态对象的空间</td>
<td>继而再对费静态对象分配空间，也就是初始化顺序是先静态再非静态</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="1、Java静态对象到底有什么好处"><a href="#1、Java静态对象到底有什么好处" class="headerlink" title="1、Java静态对象到底有什么好处"></a>1、Java静态对象到底有什么好处</h2><p>A，静态对象的数据在全局是唯一的，一改都改。如果你想要处理的东西是整个程序中唯一的，弄成静态是个好方法。 非静态的东西你修改以后只是修改了他自己的数据，但是不会影响其他同类对象的数据。 </p>
<p>B，引用方便。直接用 类名.静态方法名  或者  类名.静态变量名就可引用并且直接可以修改其属性值，不用get和set方法。</p>
<p>C，保持数据的唯一性。此数据全局都是唯一的，修改他的任何一处地方，在程序所有使用到的地方都将会体现到这些数据的修改。有效减少多余的浪费。</p>
<p>D，static final用来修饰成员变量和成员方法，可简单理解为“全局常量”。对于变量，表示一旦给值就不可修改；对于方法，表示不可覆盖。</p>
<h2 id="2、静态变量、静态方法和静态块"><a href="#2、静态变量、静态方法和静态块" class="headerlink" title="2、静态变量、静态方法和静态块"></a>2、静态变量、静态方法和静态块</h2><p>通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象（跟类是否有static修饰无关）。</p>
<p>你可以将方法和变量都声明为static。static 成员的最常见的 例子是main( ) 。声明为static的方法有以下几条限制（main也是？？）：</p>
<p>A，它们仅能调用其他的static 方法<br>B，它们只能访问static数据<br>C，它们不能以任何方式引用this 或super(this涉及到对象，super 与继承有关）</p>
<h4 id="示例：Static-块仅在该类被加载时执行一次。下面的例子显示的类有一个static方法，一些static变量，以及一个static-初始化块。"><a href="#示例：Static-块仅在该类被加载时执行一次。下面的例子显示的类有一个static方法，一些static变量，以及一个static-初始化块。" class="headerlink" title="示例：Static 块仅在该类被加载时执行一次。下面的例子显示的类有一个static方法，一些static变量，以及一个static 初始化块。"></a>示例：Static 块仅在该类被加载时执行一次。下面的例子显示的类有一个static方法，一些static变量，以及一个static 初始化块。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNew</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">3</span>;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">meth</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"x = "</span>+x);  </div><div class="line">        System.out.println(<span class="string">"a = "</span>+a);  </div><div class="line">        System.out.println(<span class="string">"b = "</span>+b);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> &#123;  </div><div class="line">        System.out.println(<span class="string">"static block initialized"</span>);  </div><div class="line">        b = a*<span class="number">4</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        meth(<span class="number">42</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果是：<br>static block initialized<br>x = 42<br>a = 3<br>b = 12</p>
<p>上述class TestNew的执行顺序是：首先static 块执行(打印一条消息)，a被设置为3，最后b被初始化为a*4 成12。然后调用main()，main () 调用meth() ，把值42传递给x。3个println ( ) 语句引用两个static变量a和b，以及局部变量x 。</p>
<h2 id="3、外部使用静态变量或者静态方法"><a href="#3、外部使用静态变量或者静态方法" class="headerlink" title="3、外部使用静态变量或者静态方法"></a>3、外部使用静态变量或者静态方法</h2><p>在定义它们的类的外面，static 方法和变量能独立于任何对象而被使用，你只要在类的名字后面加点号运算符即可。可以看到，这种格式与通过对象引用变量调用非static方法或者变量的格式类似。示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticDemo</span></span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">42</span>;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">99</span>;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callme</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"a = "</span>+a);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNew</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        StaticDemo.callme();  </div><div class="line">        System.out.println(<span class="string">"b = "</span>+StaticDemo.b);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br>a = 42<br>b = 99</p>
<h2 id="4、静态内部类是指在一个类的内部，又定义了一个用static修饰的类。可以用C中的结构体内嵌结构体来理解。"><a href="#4、静态内部类是指在一个类的内部，又定义了一个用static修饰的类。可以用C中的结构体内嵌结构体来理解。" class="headerlink" title="4、静态内部类是指在一个类的内部，又定义了一个用static修饰的类。可以用C中的结构体内嵌结构体来理解。"></a>4、静态内部类是指在一个类的内部，又定义了一个用static修饰的类。可以用C中的结构体内嵌结构体来理解。</h2><p>A，首先，用内部类是因为内部类与所在外部类有一定的关系，往往只有该外部类调用此内部类。所以没有必要专门用一个Java文件存放这个类。</p>
<p>B，静态方法、静态成员变量。它唯一的作用就是随着类的加载（而不是随着对象的产生）而产生，以致可以用类名+静态成员名直接获得。这样静态内部类就可以理解了，它可以直接被用 外部类名+内部类名 获得。举例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Build</span> </span>&#123;</div><div class="line">       ..............</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VERSION</span> </span>&#123;</div><div class="line">            ................</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE = getString(<span class="string">"ro.build.version.release"</span>);</div><div class="line">            ................</div><div class="line">      &#125;</div><div class="line">      ................</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在外部可以直接通过Build.VERSION.RELEASE来访问。</p>
<blockquote>
<p>参考原文：<a href="http://www.cnblogs.com/-0_0-/articles/1962368.html" target="_blank" rel="external">http://www.cnblogs.com/-0_0-/articles/1962368.html</a><br>参考原文：<a href="http://blog.sina.com.cn/s/blog_5cd7f5b40100r0rt.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_5cd7f5b40100r0rt.html</a><br>参考原文：<a href="http://zhidao.baidu.com/question/149873207.html" target="_blank" rel="external">http://zhidao.baidu.com/question/149873207.html</a><br>参考原文：<a href="http://ddvcxj.blog.51cto.com/1064441/26534" target="_blank" rel="external">http://ddvcxj.blog.51cto.com/1064441/26534</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2SE </tag>
            
            <tag> Coding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观西]]></title>
      <url>/2017/10/21/Europe-Mid2017/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Het.jpg" alt="Het Concertgebouw"></p>
<p>Het Concertgebouw，当从来不知道中午十一点也能开音乐会的我坐在这家世界三大音响效果最佳的音乐厅之一的RCO主场，拍完照装完逼，准备听一段并不感冒的莫扎特K219，在几乎忽视了这松润甜的混响的确比干涩的国家大剧院高到不知哪里去的事实的同时，一阵雷动的掌声倏忽间将我埋进了齐齐站起的满场垂垂老矣的白发先生当中，生出一阵焦虑。</p>
<a id="more"></a>
<h2 id="阿姆斯特丹"><a href="#阿姆斯特丹" class="headerlink" title="阿姆斯特丹"></a>阿姆斯特丹</h2><p>德奥系目的地偏多的行程里阿姆斯特丹算是奇葩一朵，位列周游列国印象最佳，虽然整座城市大多只是以运河为经脉的老城环状地带以及清一色的联排建筑，大概也是因为荷兰人看上去比傲的要上天的德奥人nice以及从巴黎过去的一路看太多荷兰境内草场看到吐的缘故。搭积木般的小城里人行道有轨电车Tram甚至汽车混搭的交通，且不说两百多米一站的路程时常让你决断不了干脆走路还是花1个多欧去乘Tram，一些小街区出了车门两步路就能迈进一家店的体验可真是住在北京这种出了地铁车厢还要经过少说两段长梯到路面，再走十几分钟才能进家门的人不曾体会到的。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3410.jpg" alt="IMG_3410"></p>
<p>城小，于是文化生活的消息相对容易掌握，爱音乐之人前面的Het Concertgebouw自然不可错过，碰到RCO的演出最好。与之隔一片草地的梵高博物馆，也值得每个爱好者或者像我这般完全连不上平面艺术WiFi的人逛逛，展品不必多说，而从展馆设计到服务到展陈设计到路线几乎是垂直专业类博物馆里的翘楚，导览以及Audioguide也是至今逛到的博物馆里最好用的；可以说除了那本名画集的中文版封面标题排版之外，鲜有槽点。要是上溯到海上霸权的那些事儿，就得荷兰国家博物馆来撑场面了，只是贪多易乱，虽然乱不过卢浮宫，但也要抱着相当的耐心；除了著名打卡地《夜巡》，在日不落帝国都不曾见过如此密集的展现盛极一时的航海时代。</p>
<p>至于De Wallen那边tedious的橱窗长腿妹，放到东方男性oriented的市场里估计要垫底，就连后来的东欧也接受不能，而且被大麻味熏到头疼也并不是多好的体验，曼谷才是你们的福地。大概也因为太过出名，除了运河两边的橱窗，这里的小巷子里挤满了男女老少各色观光客，虽然真的不会有人冲亚洲长相的男性喊“发票”，但也能不时听到国内游客们“她们能有生意么？”的讨论。</p>
<h2 id="维也纳"><a href="#维也纳" class="headerlink" title="维也纳"></a>维也纳</h2><p>作为德语区第二大城市的维也纳显然要比柏林幸运的多，昔日帝国与王朝的心血并未因战争受损太多，建筑一派雍容华贵，只是在巴黎已经对建筑审美疲劳的我美泉宫美景宫霍夫堡不是没去就是匆匆路过，唯一进过号称混杂各种建筑风格的St. Stephen’s教堂，修葺的影子挡不住本身的巍峨，这几天里唯有布拉格的圣维特可与之一拼。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3694.jpg" alt="IMG_3694"></p>
<p>而发现了艺术史博物馆这块福地绝对是在维也纳最大的惊喜，以“宝石雕刻”为主的装饰艺术不得不让你对这种原本印象中奇技淫巧的花哨玩意儿肃然起敬，简单到金银宝石雕刻的华贵器具，复杂到拟生物座钟及天文钟，远到埃及纸莎草死者之书，近到文具水晶这些科学启蒙时代的产物，远比伦敦的VA及大英的装饰艺术馆好看。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3608.jpg" alt="IMG_3608"></p>
<p>更不用说二层这种“课本名画”堆的到处都是，卡拉瓦乔、勃鲁盖尔、鲁本斯每个人都能挂一屋子的地方了。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3618.jpg" alt="IMG_3618"></p>
<p>艺术史博物馆与对面的自然史博物馆，是特雷西亚广场两侧几乎相同的两栋建筑，一个收藏了最多的宝石雕刻，一个收藏了最多的陨石和矿藏（大概也是最多的鹦鹉螺壳…）。一层鳞次栉比分布着各色矿藏，其中的衍生晶体除了让你感叹自然之无限诡谲之外别无他念，二楼的脊椎动物标本就比较无趣和常见；整体来说矿藏化石和陈年标本值得一逛，假如你对泡了两百多年的带状绦虫之类的奇葩展品感兴趣的话。首先不要被3000万件藏品的简介吓到，因为大概那几百只蚂蚁跟几百只瓢虫就能贡献好几个百分点……</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3616.jpg" alt="IMG_3616"></p>
<p>名声在外的金色大厅不常遇得上维也纳爱乐的演出，更多的是到处都有兜售的不知名乐团的旅游团曲目音乐会，还好我也不听施特劳斯……倒是临时起意跑去国家歌剧院碰碰站票的运气，第一次Opera的经历就这么3个欧贱卖了出去，歌剧院虽老却也为了照顾各国观众几乎每个座位都有不同语言的字幕提词器，然而还是在听完熟悉的第一幕配乐之后不可避免的逃了出去。德奥观众的严谨在于他绝对会群起而厉声制止那些意不在演出却有意无意制造噪音的人。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3691.jpg" alt="IMG_3691"></p>
<h2 id="巴黎"><a href="#巴黎" class="headerlink" title="巴黎"></a>巴黎</h2><p>巴黎的沉淀是能直接把所有装逼的心态打回原形的地方，作为两个领域的纯小白，当你不知道该从历史开始看起还是城市建筑史开始看起的时候，就只是想哭。被奥斯曼新古典主义的中产阶级石砌建筑重重包围了两天的行程，也就依稀记得卢浮宫的乱，奥赛的莫奈，埃菲尔的小和圣母院全程懵逼的弥撒。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/Snip20171026_1.png" alt="Snip20171026_1"></p>
<p>高潮出现在铁塔旁边的河畔博物馆Musée du Quai Branly，藏品多来自处在世界边缘的亚非拉和大洋洲；古希腊罗马雕塑再多，能见到的也大都是高度拟人化的风格，就算是怪力乱神也得尽量安个人的样子；土著先民可不管这一套，一路下来直感叹所谓“文明社会”想象力之匮乏。</p>
<h2 id="萨尔茨堡"><a href="#萨尔茨堡" class="headerlink" title="萨尔茨堡"></a>萨尔茨堡</h2><p>多年以前受古典乐荼毒不深尚在新粉丝狂热时候留下了这样的豆瓣签名“老了能在萨尔茨堡的山下湖前有个小屋，每天走在街上就能听到巴赫”，能不能有个小屋两说，小城南边阿尔卑斯北麓以及去往维也纳的一路倒是林立各种精致的木屋建筑，但估计每天走在街上听到的只能是各种语言的旅游团喇叭声了。幸好不是在萨尔茨堡音乐节到此，或者在琉森音乐节去琉森，得见这种小城的本来面目只能以无聊概括，论景点恨不得全城一天可以逛两次，对于一个从城中心的酒店走着就能去中央车站的“城市”，生活一个月大概就能逛遍和吃遍所有的店了吧。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/ppetmp.jpg" alt="ppetmp"></p>
<p>布拉格，没什么意思，Communism害死人。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3784.jpg" alt="IMG_3784"><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3783.jpg" alt="IMG_3783"></p>
<p>FYI：“说走就走”其实对于欧洲是个不小的挑战，时常会让你面临房少车少而人多的状况，比如提前几个月能比提前几天便宜两三倍的火车票，幸好我这种辞职流浪时间重要不过钱包的时候也有便宜到不行的跨国巴士可以选择，无论是巴黎往阿姆斯特丹的Euroline、德国主营周边的Flixbus、捷克主营的Regiojet都是除了时间之外完全不输火车的体验；不过巴士跑高速，火车钻山，后者风景常会好过前者；然而并非高铁的大多数线路真的很难让你找到时间上的优势。至于房，除非太穷或者酒店一间不剩，还是不要住民宿这种东西了。</p>
<p>妨碍一时冲动的还有比语言更难懂的各国市内交通，已经无力吐槽，对于布拉格这种最糟糕的城市还是早日买24小时票保命，免得满地找售票机甚至假如身上还没有合适的硬币克朗；反正除了逃票之外完全找不到日本那种往售票机里无脑扔一把硬币一秒钟收到找零的快感。</p>
<h2 id="莱比锡"><a href="#莱比锡" class="headerlink" title="莱比锡"></a>莱比锡</h2><p>差点忘了巴赫爸爸。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/9DB6F43A-7392-4EB0-8827-8BF4C3254683-1.jpg" alt="9DB6F43A-7392-4EB0-8827-8BF4"></p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游记 </tag>
            
            <tag> 欧洲 </tag>
            
            <tag> 博物馆 </tag>
            
            <tag> KHM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观东]]></title>
      <url>/2017/10/08/Japan-Early2017/</url>
      <content type="html"><![CDATA[<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_3164%20%28Priime%20Fall%29.jpeg" alt="Kyoto"></p>
<p>人大概在这两种时候会心生忐忑，见自己初喜欢的人，和见自己喜欢过的未知，后者如日本。</p>
<p>该怎么形容“我与日本”这样的话题呢？始终到临走前，我还是没想好的哇。而且总是会想起跟过去有关的事。你的童年与她有关，你的梦想与她有关，你对世界的幻想与她有关，你对爱情的期望与她有关，你的成人礼都与她有关，这么多角色扭打在一起的时候，忐忑就更悠远绵长起来。</p>
<a id="more"></a>
<h2 id="大阪"><a href="#大阪" class="headerlink" title="大阪"></a>大阪</h2><p>价值观如我这般摇摆的人就不应该在去关西前先入为主的听了《日谈公园》，主播菌口中的大农村的印象就那么结实的印到了大阪的首日里；且不说爱彼迎的小屋再一次让人咬牙切齿的痛恨了一回摄影师这个职业（不过也倒是目前见过设施最全的民宿了喂），心斋桥这种小商品一条街也实在让人提不起兴趣，任你优衣库的整栋楼再多可以逛，药妆店吆喝中文的姑娘们再好看，也只是喜欢躲到河边排个一兰拉面尝试一下各种软硬面条和汤底的搭配。</p>
<p>对于一个ぜんぜん弄不懂织田信长丰臣秀吉德川家康谁创业谁守业的人来说，天守城这种大阪为数不多的景点也是百无聊赖，好在旁边就是大阪历史博物馆，在经历了跟基本听不懂英语的接待比划半天我到底该不该存包然后干脆趁那个难缠的人不在溜了进去之后，不得不说总算是找到了抵日两天的精神寄托；硬货不多，要不也不会满是中国都唐了日本同期还是以为属于绳纹弥生时代的陶罐之类的东西；不过日本人的精致还是在还原江户生活的模型里体现的淋漓尽致，比南博负一层的民国时代大模型们难做多了……</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkjcfi8pruj31kw11xdwk.jpg" alt="大阪历史博物馆"></p>
<p>打定主意不怎么做攻略的我提前一个周才知道买了买电话卡跟地铁票，遗憾是错过了东京的三鹰吉卜力这个需要提前一月订票的情怀之地，但惊喜也是有的，梅田就是第一个。说来也巧，在那个有百八十个出口的站把我绕晕之前，捡了个百货商场出口的门就夺门而逃了，路遇现在才知道曲风叫做neo soul的band，看在keyboard姑娘美，哦不，是好听而且还是少见的不是solo的份上，现场不失所望的越来越燃，至少听起来比买回来的拘谨的录音室CD张狂的多，所以谁会说未来Live不是比Record更好更有发展的音乐形式呢？嗯已经在打FUJI ROCK的主意了。</p>
<h2 id="京都"><a href="#京都" class="headerlink" title="京都"></a>京都</h2><p>真正爱上日本也是从京都开始的吧。当然还是不太推荐在游客高峰期去岚山这种地方，必然是满脑子WTF的怀疑这是个假日本……攻略都是骗人的……要不是有抹茶冰淇淋的拯救，大概对京都的印象也不会好。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/79B81741-228C-4245-A1FB-9FA499B02DA1.jpg" alt="79B81741-228C-4245-A1FB-9FA499B02DA1"></p>
<p>踩了踩岚山的竹林，并且没看懂周总理写的是什么诗，小火车回到住地四条大宫的时间还早，折转就去了八坂神社圆山公园二年坂，然后就在四条出口和公园见识了日本人都是怎么卖艺的……大叔拿把破琴指弹玩儿的再认真点就赶上押尾了，而另一位大叔的乐器是两万多的手碟，真是不知道给多少钱合适啊。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkjchn7p3jj31kw11xu0x.jpg" alt="京都历史博物馆"></p>
<p>第二日的雨让原本金阁寺银阁寺各种寺伏见稻荷打卡一日游的计划被打乱，跑去京都博物馆的室内临时躲雨行程也因为傲娇的非闭馆日闭馆而只花门票的价格参观了一个庭院终结。在纠结总不至于为了一点小雨就牺牲一天住宿费的时候，还是强忍着坐电车去扫一个景点算一个，那就伏见稻荷吧。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkjc49mz59j31kw11x4qp.jpg" alt="伏见稻荷山下"></p>
<p>虽然没见过阳光嶙峋的千鸟居，但雨中同样流连。伏见稻荷的鸟居漫山遍野，如果你挤不过山脚下围住它们拍照的游客们，山上一点儿不输于此，无论体量还是规模；当然半腰下山的一段奉满了各路神像，要是再有点儿阴天，大概走着就会怕会不会像千寻的爸妈一样被抓去变成猪。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_1903.JPG" alt="IMG_1903"></p>
<p>除了文保原因的电车不多，店家关门过早也是不小的困扰，想来八坂神社以上的二年坂三年坂入夜挑灯应该是蛮迷离隔世的一番景色，奈何天一擦黑就纷纷收摊，简直是让人羡慕嫉妒恨的日落而息的生活状态。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fkjcjahdapj31kw11x4qp.jpg" alt="京都御陵卫"></p>
<p>总之这是个遗憾大过惊喜的地方，换句话说还对它有绵延不止的期待，比如没去成金阁寺和没吃成怀石料理，anyway，当在御陵卫外边追着那一线阳光拍影子的时候，大概就决定了以后会去常住的吧。</p>
<h2 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h2><p>去过伦敦之后，我一直以为，东京大概也是类似的“大城市”，那句“如果你厌倦了伦敦，你就厌倦了生活”大概也能套用到后者身上。谁能不爱东京呢？</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_2003.JPG" alt="IMG_2003"></p>
<p>不知是否被贵到吃土的新干线伤了神，反正东京的电车还是再次印证了在日本的几天依然没弄懂铁路系统的问题；在出东京站出了半小时、转大手町找了半小时之后，总算找到了去押上的线。好在如此的折腾又换到了一个惊喜，酒店旁边就藏着东京的两家Pokemon Center之一，不由分说抱一只皮卡丘回去是当然的，只是不得不吐槽，除了皮卡丘的等身之外，其他周边还是粗糙，而且一架子不认识的精灵都在冲你说：你老了。</p>
<p>东京的游记至今已经理不出头绪，就像在东京的几天永远没有头绪一样，坐地铁走到哪儿，哪儿都可以玩上半天，计划的落空与补给来的惊喜错综交织，到最后你就早已不记得为玩而玩这件事了。本来的赏樱路线变成了银座那连比弗利和广东道都比不了的大牌林立，本来打个卡就走的早稻田却意外碰上了无法理解的春季毕业季，唯有秋叶原去的符合行程，而那堆成山的手办和小电影真是让人有心无力。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_2009.JPG" alt="IMG_2009"></p>
<p>转头说说文化的事，住在押上的另一个好处是，上野就在附近，当然樱花尚不吐蕊的上野恩赐公园并不好玩，而整个上野像柏林的博物馆岛和伦敦特拉法加广场周围一样遍布博物馆，从森美术馆开始，到柯布西耶设计的国立西洋美术馆，到始终没机会进去的自然博物馆，到逛了一天半收藏了规模宏大的植轮跟太刀的最大的东京国立博物馆。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_1941.JPG" alt="IMG_1941"></p>
<p>当然六本木偶遇的印度Harsha的Charming Journey展，也比东京塔的夜景有趣，毕竟世界上只有爱情和艺术这两件东西使我们的生活值得苟且。</p>
<p>这样的苗头像极了伦敦四万步的经历，既然肯定有下次，最后一天的行程干脆完全留给了花钱不多的博物馆系列（日本每个博物馆都花钱这很蛋疼），看在上野的那一片离酒店近取行李也方便而且晚上还开的份上就先去了《博物志》里推荐的印刷博物馆。虽然没怎么去过国内的主题博物馆，没得比较，但还是惊叹于展陈的完整性和事无巨细，展品收集上是否丰富有代表性不好评论，毕竟不懂，然而就教学作用来说，完全是白痴看完也能懂的节奏。</p>
<p>出门有每天一节接待六位的印刷体验课，看在人不多的份上尽管不怎么懂日语我还是抱着看展的余热排在门口，奈何半天才找出一位会英语的能交流的叫やまだ的小姑娘，全程被特殊对待并且拿据说是40年代的英产手动活字印刷机印了七张写我名字的信笺而告终。</p>
<p><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_2017.JPG" alt="IMG_2017"><br><img src="http://oxgw3nd2b.bkt.clouddn.com/IMG_2022.JPG" alt="IMG_2022"></p>
<p>其他，且不说服务与清洁程度，就是自动化程度之高，也是去过的其他发达国家都无法企及的，路边随处可见的自动贩卖机几乎永远有冷饮热咖啡（似乎厂牌还分的很明显，三得利的机器永远只有旗下的各式咖啡，朝日的机器啤酒居多，伊右卫门的机器自然是热茶居多，其他不知名的则提供各种品牌的小甜水），一兰（要是不等位的话）和松屋这样的快餐以及京都车站的拉面一条街几乎靠自动点餐机就能解决问题，永远提供中日韩英四国语言，酒店的自动洗衣烘干状态能显示到客房电视上，社区也总有自动洗衣门店，就连东京国立博物馆的门票都是自动投币买，车站的精算机也是个神奇的东西。</p>
<p>能在这样一个不需要见人说人话见鬼说鬼话的地方，不愁吃不愁喝，有温暖的周末，做个平凡人没什么不好。</p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游记 </tag>
            
            <tag> 大阪 </tag>
            
            <tag> 东京 </tag>
            
            <tag> 京都 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
